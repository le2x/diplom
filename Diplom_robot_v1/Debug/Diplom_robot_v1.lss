
Diplom_robot_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000556  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00000556  000005ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008000c0  008000c0  0000064a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  0000067a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000633  00000000  00000000  00000702  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ec  00000000  00000000  00000d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027b  00000000  00000000  00000f21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c4  00000000  00000000  0000119c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039a  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000395  00000000  00000000  000016fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001a8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_1>
   8:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3c       	cpi	r26, 0xC0	; 192
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ec       	ldi	r26, 0xC0	; 192
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3d       	cpi	r26, 0xD0	; 208
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <main>
  8a:	0c 94 a9 02 	jmp	0x552	; 0x552 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z9init_UARTv>:


void init_UART()
{
	//	Установка скорости 9600
	UBRRH=0;	//	UBRR=f/(16*band)-1 f=8000000Гц band=9600, 
  92:	10 bc       	out	0x20, r1	; 32
	UBRRL=51;	//	нормальный асинхронный двунаправленный режим работы
  94:	83 e3       	ldi	r24, 0x33	; 51
  96:	89 b9       	out	0x09, r24	; 9
	UCSRA=0b00000000;
  98:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0b00011000;	//	разрешен приём и передача по UART
  9a:	88 e1       	ldi	r24, 0x18	; 24
  9c:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0b10000110;	//	8-битовая посылка
  9e:	86 e8       	ldi	r24, 0x86	; 134
  a0:	80 bd       	out	0x20, r24	; 32
  a2:	08 95       	ret

000000a4 <_Z9send_Uarth>:
}

//	UART
void send_Uart(unsigned char c)//	Отправка байта
{
	while(!(UCSRA&(1<<UDRE)))	//	Устанавливается, когда регистр свободен
  a4:	5d 9b       	sbis	0x0b, 5	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <_Z9send_Uarth>
	{}
	UDR = c;
  a8:	8c b9       	out	0x0c, r24	; 12
  aa:	08 95       	ret

000000ac <_Z13send_Uart_strPKc>:
}

void send_Uart_str(const char *s)//	Отправка строки
{
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	ec 01       	movw	r28, r24
	while (*s != 0) send_Uart(*s++);
  b2:	88 81       	ld	r24, Y
  b4:	88 23       	and	r24, r24
  b6:	31 f0       	breq	.+12     	; 0xc4 <_Z13send_Uart_strPKc+0x18>
  b8:	21 96       	adiw	r28, 0x01	; 1
  ba:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z9send_Uarth>
  be:	89 91       	ld	r24, Y+
  c0:	81 11       	cpse	r24, r1
  c2:	fb cf       	rjmp	.-10     	; 0xba <_Z13send_Uart_strPKc+0xe>
}
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <_Z13send_int_Uartj>:

void send_int_Uart(unsigned int c)//	Отправка числа от 0000 до 9999
{
  ca:	ef 92       	push	r14
  cc:	ff 92       	push	r15
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	ac 01       	movw	r20, r24
	unsigned char temp;
	c=c%10000;
  d8:	9c 01       	movw	r18, r24
  da:	32 95       	swap	r19
  dc:	22 95       	swap	r18
  de:	2f 70       	andi	r18, 0x0F	; 15
  e0:	23 27       	eor	r18, r19
  e2:	3f 70       	andi	r19, 0x0F	; 15
  e4:	23 27       	eor	r18, r19
  e6:	a7 e4       	ldi	r26, 0x47	; 71
  e8:	b3 e0       	ldi	r27, 0x03	; 3
  ea:	0e 94 9a 02 	call	0x534	; 0x534 <__umulhisi3>
  ee:	ec 01       	movw	r28, r24
  f0:	d6 95       	lsr	r29
  f2:	c7 95       	ror	r28
  f4:	d6 95       	lsr	r29
  f6:	c7 95       	ror	r28
  f8:	d6 95       	lsr	r29
  fa:	c7 95       	ror	r28
  fc:	20 e1       	ldi	r18, 0x10	; 16
  fe:	37 e2       	ldi	r19, 0x27	; 39
 100:	c2 9f       	mul	r28, r18
 102:	c0 01       	movw	r24, r0
 104:	c3 9f       	mul	r28, r19
 106:	90 0d       	add	r25, r0
 108:	d2 9f       	mul	r29, r18
 10a:	90 0d       	add	r25, r0
 10c:	11 24       	eor	r1, r1
 10e:	ea 01       	movw	r28, r20
 110:	c8 1b       	sub	r28, r24
 112:	d9 0b       	sbc	r29, r25
	temp=c/100;
 114:	9e 01       	movw	r18, r28
 116:	36 95       	lsr	r19
 118:	27 95       	ror	r18
 11a:	36 95       	lsr	r19
 11c:	27 95       	ror	r18
 11e:	ab e7       	ldi	r26, 0x7B	; 123
 120:	b4 e1       	ldi	r27, 0x14	; 20
 122:	0e 94 9a 02 	call	0x534	; 0x534 <__umulhisi3>
 126:	8c 01       	movw	r16, r24
 128:	16 95       	lsr	r17
 12a:	07 95       	ror	r16
	send_Uart(temp/10+'0');
 12c:	0f 2e       	mov	r0, r31
 12e:	fd ec       	ldi	r31, 0xCD	; 205
 130:	ff 2e       	mov	r15, r31
 132:	f0 2d       	mov	r31, r0
 134:	0f 9d       	mul	r16, r15
 136:	e1 2c       	mov	r14, r1
 138:	11 24       	eor	r1, r1
 13a:	e6 94       	lsr	r14
 13c:	e6 94       	lsr	r14
 13e:	e6 94       	lsr	r14
 140:	80 e3       	ldi	r24, 0x30	; 48
 142:	8e 0d       	add	r24, r14
 144:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z9send_Uarth>
	send_Uart(temp%10+'0');
 148:	ee 0c       	add	r14, r14
 14a:	8e 2d       	mov	r24, r14
 14c:	88 0f       	add	r24, r24
 14e:	88 0f       	add	r24, r24
 150:	e8 0e       	add	r14, r24
 152:	80 2f       	mov	r24, r16
 154:	8e 19       	sub	r24, r14
 156:	80 5d       	subi	r24, 0xD0	; 208
 158:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z9send_Uarth>
	temp=c%100;
 15c:	24 e6       	ldi	r18, 0x64	; 100
 15e:	20 9f       	mul	r18, r16
 160:	c0 01       	movw	r24, r0
 162:	21 9f       	mul	r18, r17
 164:	90 0d       	add	r25, r0
 166:	11 24       	eor	r1, r1
 168:	c8 1b       	sub	r28, r24
 16a:	d9 0b       	sbc	r29, r25
	send_Uart(temp/10+'0');
 16c:	cf 9d       	mul	r28, r15
 16e:	d1 2d       	mov	r29, r1
 170:	11 24       	eor	r1, r1
 172:	d6 95       	lsr	r29
 174:	d6 95       	lsr	r29
 176:	d6 95       	lsr	r29
 178:	80 e3       	ldi	r24, 0x30	; 48
 17a:	8d 0f       	add	r24, r29
 17c:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z9send_Uarth>
	send_Uart(temp%10+'0');
 180:	dd 0f       	add	r29, r29
 182:	8d 2f       	mov	r24, r29
 184:	88 0f       	add	r24, r24
 186:	88 0f       	add	r24, r24
 188:	d8 0f       	add	r29, r24
 18a:	8c 2f       	mov	r24, r28
 18c:	8d 1b       	sub	r24, r29
 18e:	80 5d       	subi	r24, 0xD0	; 208
 190:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z9send_Uarth>
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	08 95       	ret

000001a2 <_Z8init_pwmv>:
//	OCR0 = 0x00; //начальное состояние 0
	
//	TCCR2|=(1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS21);
//	OCR2 = 0x00; //начальное состояние 0
	
	TCCR1A = (1<<COM1A1)|(1<<WGM10)|(1<<COM1B1)|(1<<WGM12);
 1a2:	89 ea       	ldi	r24, 0xA9	; 169
 1a4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<CS11); //предделитель = 1
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0x00; //начальное состо¤ние 0
 1aa:	1b bc       	out	0x2b, r1	; 43
 1ac:	1a bc       	out	0x2a, r1	; 42
	
	DDRD |= (1<<PD4)|(1<<PD5);
 1ae:	81 b3       	in	r24, 0x11	; 17
 1b0:	80 63       	ori	r24, 0x30	; 48
 1b2:	81 bb       	out	0x11, r24	; 17
	
	OCR1A = (WholePWM+RightBalancePWM)*Spiral;
 1b4:	40 91 62 00 	lds	r20, 0x0062
 1b8:	50 91 63 00 	lds	r21, 0x0063
 1bc:	80 91 cc 00 	lds	r24, 0x00CC
 1c0:	90 91 cd 00 	lds	r25, 0x00CD
 1c4:	48 0f       	add	r20, r24
 1c6:	59 1f       	adc	r21, r25
 1c8:	20 91 60 00 	lds	r18, 0x0060
 1cc:	30 91 61 00 	lds	r19, 0x0061
 1d0:	42 9f       	mul	r20, r18
 1d2:	c0 01       	movw	r24, r0
 1d4:	43 9f       	mul	r20, r19
 1d6:	90 0d       	add	r25, r0
 1d8:	52 9f       	mul	r21, r18
 1da:	90 0d       	add	r25, r0
 1dc:	11 24       	eor	r1, r1
 1de:	9b bd       	out	0x2b, r25	; 43
 1e0:	8a bd       	out	0x2a, r24	; 42
	OCR1B = WholePWM+RightBalancePWM;
 1e2:	20 91 62 00 	lds	r18, 0x0062
 1e6:	30 91 63 00 	lds	r19, 0x0063
 1ea:	80 91 cc 00 	lds	r24, 0x00CC
 1ee:	90 91 cd 00 	lds	r25, 0x00CD
 1f2:	82 0f       	add	r24, r18
 1f4:	93 1f       	adc	r25, r19
 1f6:	99 bd       	out	0x29, r25	; 41
 1f8:	88 bd       	out	0x28, r24	; 40
 1fa:	08 95       	ret

000001fc <_Z9initTimerv>:
	//DDRB |= (1<<PB3);
}

void initTimer(){
	TIMSK |= (1<<TOIE0);
 1fc:	89 b7       	in	r24, 0x39	; 57
 1fe:	81 60       	ori	r24, 0x01	; 1
 200:	89 bf       	out	0x39, r24	; 57
	TCCR0|=(1<<CS00);
 202:	83 b7       	in	r24, 0x33	; 51
 204:	81 60       	ori	r24, 0x01	; 1
 206:	83 bf       	out	0x33, r24	; 51
 208:	08 95       	ret

0000020a <_Z15externalIntInitv>:
}

void externalIntInit( void )
{
	//настраиваем на срабатывание INT0 по переднему фронту
	MCUCR |= (1<<ISC01)|(1<<ISC00)|(1<<ISC11)|(1<<ISC10);
 20a:	85 b7       	in	r24, 0x35	; 53
 20c:	8f 60       	ori	r24, 0x0F	; 15
 20e:	85 bf       	out	0x35, r24	; 53
	//разрешаем внешнее прерывание INT0
	GICR |= (1<<INT0)|(1<<INT1);
 210:	8b b7       	in	r24, 0x3b	; 59
 212:	80 6c       	ori	r24, 0xC0	; 192
 214:	8b bf       	out	0x3b, r24	; 59
	sei();
 216:	78 94       	sei
 218:	08 95       	ret

0000021a <__vector_1>:
}

ISR( INT0_vect )
{
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	2f 93       	push	r18
 226:	3f 93       	push	r19
 228:	4f 93       	push	r20
 22a:	5f 93       	push	r21
 22c:	6f 93       	push	r22
 22e:	7f 93       	push	r23
 230:	8f 93       	push	r24
 232:	9f 93       	push	r25
 234:	af 93       	push	r26
 236:	bf 93       	push	r27
 238:	ef 93       	push	r30
 23a:	ff 93       	push	r31
	impulseLeftPerWheeltemp = impulseLeftPerWheel;
 23c:	80 91 ca 00 	lds	r24, 0x00CA
 240:	90 91 cb 00 	lds	r25, 0x00CB
 244:	90 93 c9 00 	sts	0x00C9, r25
 248:	80 93 c8 00 	sts	0x00C8, r24
	isImpulseLeftUsed = false;
 24c:	10 92 c1 00 	sts	0x00C1, r1
	send_Uart_str("impulseLeft = ");
 250:	84 e6       	ldi	r24, 0x64	; 100
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 56 00 	call	0xac	; 0xac <_Z13send_Uart_strPKc>
	send_int_Uart(impulseLeftPerWheel);
 258:	80 91 ca 00 	lds	r24, 0x00CA
 25c:	90 91 cb 00 	lds	r25, 0x00CB
 260:	0e 94 65 00 	call	0xca	; 0xca <_Z13send_int_Uartj>
	send_Uart_str(" OCR1A = ");
 264:	83 e7       	ldi	r24, 0x73	; 115
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 56 00 	call	0xac	; 0xac <_Z13send_Uart_strPKc>
	send_int_Uart(OCR1A);
 26c:	8a b5       	in	r24, 0x2a	; 42
 26e:	9b b5       	in	r25, 0x2b	; 43
 270:	0e 94 65 00 	call	0xca	; 0xca <_Z13send_int_Uartj>
	send_Uart(13);
 274:	8d e0       	ldi	r24, 0x0D	; 13
 276:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z9send_Uarth>
	impulseLeftPerWheel = 0;
 27a:	10 92 cb 00 	sts	0x00CB, r1
 27e:	10 92 ca 00 	sts	0x00CA, r1
}
 282:	ff 91       	pop	r31
 284:	ef 91       	pop	r30
 286:	bf 91       	pop	r27
 288:	af 91       	pop	r26
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	7f 91       	pop	r23
 290:	6f 91       	pop	r22
 292:	5f 91       	pop	r21
 294:	4f 91       	pop	r20
 296:	3f 91       	pop	r19
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_2>:

ISR( INT1_vect ){
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	4f 93       	push	r20
 2b4:	5f 93       	push	r21
 2b6:	6f 93       	push	r22
 2b8:	7f 93       	push	r23
 2ba:	8f 93       	push	r24
 2bc:	9f 93       	push	r25
 2be:	af 93       	push	r26
 2c0:	bf 93       	push	r27
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
	impulseRightPerWheeltemp = impulseRightPerWheel;
 2c6:	80 91 c6 00 	lds	r24, 0x00C6
 2ca:	90 91 c7 00 	lds	r25, 0x00C7
 2ce:	90 93 c5 00 	sts	0x00C5, r25
 2d2:	80 93 c4 00 	sts	0x00C4, r24
	isImpulseRightUsed = false;
 2d6:	10 92 c0 00 	sts	0x00C0, r1
	send_Uart_str("impulseRight = ");
 2da:	8d e7       	ldi	r24, 0x7D	; 125
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 56 00 	call	0xac	; 0xac <_Z13send_Uart_strPKc>
	send_int_Uart(impulseRightPerWheel);
 2e2:	80 91 c6 00 	lds	r24, 0x00C6
 2e6:	90 91 c7 00 	lds	r25, 0x00C7
 2ea:	0e 94 65 00 	call	0xca	; 0xca <_Z13send_int_Uartj>
	send_Uart_str(" OCR1B = ");
 2ee:	8d e8       	ldi	r24, 0x8D	; 141
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 56 00 	call	0xac	; 0xac <_Z13send_Uart_strPKc>
	send_int_Uart(OCR1B);
 2f6:	88 b5       	in	r24, 0x28	; 40
 2f8:	99 b5       	in	r25, 0x29	; 41
 2fa:	0e 94 65 00 	call	0xca	; 0xca <_Z13send_int_Uartj>
	send_Uart(13);
 2fe:	8d e0       	ldi	r24, 0x0D	; 13
 300:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z9send_Uarth>
	impulseRightPerWheel = 0;
 304:	10 92 c7 00 	sts	0x00C7, r1
 308:	10 92 c6 00 	sts	0x00C6, r1
}
 30c:	ff 91       	pop	r31
 30e:	ef 91       	pop	r30
 310:	bf 91       	pop	r27
 312:	af 91       	pop	r26
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	7f 91       	pop	r23
 31a:	6f 91       	pop	r22
 31c:	5f 91       	pop	r21
 31e:	4f 91       	pop	r20
 320:	3f 91       	pop	r19
 322:	2f 91       	pop	r18
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <__vector_9>:

ISR(TIMER0_OVF_vect){
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	8f 93       	push	r24
 33a:	9f 93       	push	r25
	impulseLeftPerWheel++;
 33c:	80 91 ca 00 	lds	r24, 0x00CA
 340:	90 91 cb 00 	lds	r25, 0x00CB
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	90 93 cb 00 	sts	0x00CB, r25
 34a:	80 93 ca 00 	sts	0x00CA, r24
	impulseRightPerWheel++;
 34e:	80 91 c6 00 	lds	r24, 0x00C6
 352:	90 91 c7 00 	lds	r25, 0x00C7
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	90 93 c7 00 	sts	0x00C7, r25
 35c:	80 93 c6 00 	sts	0x00C6, r24
}
 360:	9f 91       	pop	r25
 362:	8f 91       	pop	r24
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <_Z11MoveForwardv>:

void MoveForward(){
	send_Uart_str("MoveForward");	//	отправка строки
 36e:	87 e9       	ldi	r24, 0x97	; 151
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 56 00 	call	0xac	; 0xac <_Z13send_Uart_strPKc>
	PORTA |= (1<<POWER_LEFT_MOTOR) | (1<<POWER_RIGHT_MOTOR); 
 376:	8b b3       	in	r24, 0x1b	; 27
 378:	80 65       	ori	r24, 0x50	; 80
 37a:	8b bb       	out	0x1b, r24	; 27
	if(!isImpulseLeftUsed && !isImpulseRightUsed){
 37c:	80 91 c1 00 	lds	r24, 0x00C1
 380:	81 11       	cpse	r24, r1
 382:	29 c0       	rjmp	.+82     	; 0x3d6 <_Z11MoveForwardv+0x68>
 384:	80 91 c0 00 	lds	r24, 0x00C0
 388:	81 11       	cpse	r24, r1
 38a:	25 c0       	rjmp	.+74     	; 0x3d6 <_Z11MoveForwardv+0x68>
	compareTemp = impulseLeftPerWheeltemp - impulseRightPerWheeltemp;
 38c:	80 91 c8 00 	lds	r24, 0x00C8
 390:	90 91 c9 00 	lds	r25, 0x00C9
 394:	20 91 c4 00 	lds	r18, 0x00C4
 398:	30 91 c5 00 	lds	r19, 0x00C5
 39c:	82 1b       	sub	r24, r18
 39e:	93 0b       	sbc	r25, r19
 3a0:	90 93 c3 00 	sts	0x00C3, r25
 3a4:	80 93 c2 00 	sts	0x00C2, r24
	isImpulseLeftUsed = true; isImpulseRightUsed = true;
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	80 93 c1 00 	sts	0x00C1, r24
 3ae:	80 93 c0 00 	sts	0x00C0, r24
	impulseLeftPerWheeltemp = 0; impulseRightPerWheeltemp = 0;
 3b2:	10 92 c9 00 	sts	0x00C9, r1
 3b6:	10 92 c8 00 	sts	0x00C8, r1
 3ba:	10 92 c5 00 	sts	0x00C5, r1
 3be:	10 92 c4 00 	sts	0x00C4, r1
	send_Uart_str("  comparetemp = ");
 3c2:	83 ea       	ldi	r24, 0xA3	; 163
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 56 00 	call	0xac	; 0xac <_Z13send_Uart_strPKc>
	send_int_Uart(compareTemp);
 3ca:	80 91 c2 00 	lds	r24, 0x00C2
 3ce:	90 91 c3 00 	lds	r25, 0x00C3
 3d2:	0e 94 65 00 	call	0xca	; 0xca <_Z13send_int_Uartj>
	}
	
	send_Uart(13);		
 3d6:	8d e0       	ldi	r24, 0x0D	; 13
 3d8:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z9send_Uarth>
	if (compareTemp<0-COMPARE_RATE){
 3dc:	80 91 c2 00 	lds	r24, 0x00C2
 3e0:	90 91 c3 00 	lds	r25, 0x00C3
 3e4:	8c 3e       	cpi	r24, 0xEC	; 236
 3e6:	2f ef       	ldi	r18, 0xFF	; 255
 3e8:	92 07       	cpc	r25, r18
 3ea:	d4 f4       	brge	.+52     	; 0x420 <_Z11MoveForwardv+0xb2>
		if (OCR1A < 255){
 3ec:	2a b5       	in	r18, 0x2a	; 42
 3ee:	3b b5       	in	r19, 0x2b	; 43
 3f0:	2f 3f       	cpi	r18, 0xFF	; 255
 3f2:	31 05       	cpc	r19, r1
 3f4:	58 f4       	brcc	.+22     	; 0x40c <_Z11MoveForwardv+0x9e>
			LeftBalancePWM += 5;
 3f6:	20 91 ce 00 	lds	r18, 0x00CE
 3fa:	30 91 cf 00 	lds	r19, 0x00CF
 3fe:	2b 5f       	subi	r18, 0xFB	; 251
 400:	3f 4f       	sbci	r19, 0xFF	; 255
 402:	30 93 cf 00 	sts	0x00CF, r19
 406:	20 93 ce 00 	sts	0x00CE, r18
 40a:	0a c0       	rjmp	.+20     	; 0x420 <_Z11MoveForwardv+0xb2>
		}else{
			RightBalancePWM -=5;
 40c:	20 91 cc 00 	lds	r18, 0x00CC
 410:	30 91 cd 00 	lds	r19, 0x00CD
 414:	25 50       	subi	r18, 0x05	; 5
 416:	31 09       	sbc	r19, r1
 418:	30 93 cd 00 	sts	0x00CD, r19
 41c:	20 93 cc 00 	sts	0x00CC, r18
		}
	}
	if (compareTemp>0+COMPARE_RATE){
 420:	45 97       	sbiw	r24, 0x15	; 21
 422:	c4 f0       	brlt	.+48     	; 0x454 <_Z11MoveForwardv+0xe6>
		if(OCR1B< 255){
 424:	88 b5       	in	r24, 0x28	; 40
 426:	99 b5       	in	r25, 0x29	; 41
 428:	8f 3f       	cpi	r24, 0xFF	; 255
 42a:	91 05       	cpc	r25, r1
 42c:	50 f4       	brcc	.+20     	; 0x442 <_Z11MoveForwardv+0xd4>
			RightBalancePWM += 5;
 42e:	80 91 cc 00 	lds	r24, 0x00CC
 432:	90 91 cd 00 	lds	r25, 0x00CD
 436:	05 96       	adiw	r24, 0x05	; 5
 438:	90 93 cd 00 	sts	0x00CD, r25
 43c:	80 93 cc 00 	sts	0x00CC, r24
 440:	09 c0       	rjmp	.+18     	; 0x454 <_Z11MoveForwardv+0xe6>
		}else{
			LeftBalancePWM-=5;
 442:	80 91 ce 00 	lds	r24, 0x00CE
 446:	90 91 cf 00 	lds	r25, 0x00CF
 44a:	05 97       	sbiw	r24, 0x05	; 5
 44c:	90 93 cf 00 	sts	0x00CF, r25
 450:	80 93 ce 00 	sts	0x00CE, r24
		}
	}
	compareTemp = 0;	
 454:	10 92 c3 00 	sts	0x00C3, r1
 458:	10 92 c2 00 	sts	0x00C2, r1
	OCR1B = (WholePWM+LeftBalancePWM)*Spiral;
 45c:	40 91 62 00 	lds	r20, 0x0062
 460:	50 91 63 00 	lds	r21, 0x0063
 464:	80 91 ce 00 	lds	r24, 0x00CE
 468:	90 91 cf 00 	lds	r25, 0x00CF
 46c:	48 0f       	add	r20, r24
 46e:	59 1f       	adc	r21, r25
 470:	20 91 60 00 	lds	r18, 0x0060
 474:	30 91 61 00 	lds	r19, 0x0061
 478:	42 9f       	mul	r20, r18
 47a:	c0 01       	movw	r24, r0
 47c:	43 9f       	mul	r20, r19
 47e:	90 0d       	add	r25, r0
 480:	52 9f       	mul	r21, r18
 482:	90 0d       	add	r25, r0
 484:	11 24       	eor	r1, r1
 486:	99 bd       	out	0x29, r25	; 41
 488:	88 bd       	out	0x28, r24	; 40
	OCR1A = WholePWM+RightBalancePWM;
 48a:	20 91 62 00 	lds	r18, 0x0062
 48e:	30 91 63 00 	lds	r19, 0x0063
 492:	80 91 cc 00 	lds	r24, 0x00CC
 496:	90 91 cd 00 	lds	r25, 0x00CD
 49a:	82 0f       	add	r24, r18
 49c:	93 1f       	adc	r25, r19
 49e:	9b bd       	out	0x2b, r25	; 43
 4a0:	8a bd       	out	0x2a, r24	; 42
 4a2:	08 95       	ret

000004a4 <_Z9PortsInitv>:
}

void PortsInit(){
	DDRA |= (1<<PA4)|(1<<PA5)|(1<<PA6)|(1<<PA7); // set driver outputs to exit
 4a4:	8a b3       	in	r24, 0x1a	; 26
 4a6:	80 6f       	ori	r24, 0xF0	; 240
 4a8:	8a bb       	out	0x1a, r24	; 26
	DDRC |= (1<<PC7); // signaling led
 4aa:	a7 9a       	sbi	0x14, 7	; 20
	PORTA |= (1<<POWER_LEFT_MOTOR) | (1<<POWER_RIGHT_MOTOR); 
 4ac:	8b b3       	in	r24, 0x1b	; 27
 4ae:	80 65       	ori	r24, 0x50	; 80
 4b0:	8b bb       	out	0x1b, r24	; 27
 4b2:	08 95       	ret

000004b4 <main>:
}


int main()
{
	init_UART();					//	инициализация UART
 4b4:	0e 94 49 00 	call	0x92	; 0x92 <_Z9init_UARTv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b8:	2f e3       	ldi	r18, 0x3F	; 63
 4ba:	8d e0       	ldi	r24, 0x0D	; 13
 4bc:	93 e0       	ldi	r25, 0x03	; 3
 4be:	21 50       	subi	r18, 0x01	; 1
 4c0:	80 40       	sbci	r24, 0x00	; 0
 4c2:	90 40       	sbci	r25, 0x00	; 0
 4c4:	e1 f7       	brne	.-8      	; 0x4be <main+0xa>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <main+0x14>
 4c8:	00 00       	nop
	_delay_ms(1000);				//	задержка 1c
	send_Uart_str("alex-exe.ru");	//	отправка строки
 4ca:	84 eb       	ldi	r24, 0xB4	; 180
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 56 00 	call	0xac	; 0xac <_Z13send_Uart_strPKc>
	send_Uart(13);					//	перенос строки
 4d2:	8d e0       	ldi	r24, 0x0D	; 13
 4d4:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z9send_Uarth>
	send_int_Uart(2013);			//	отправка числа
 4d8:	8d ed       	ldi	r24, 0xDD	; 221
 4da:	97 e0       	ldi	r25, 0x07	; 7
 4dc:	0e 94 65 00 	call	0xca	; 0xca <_Z13send_int_Uartj>
	send_Uart(13);					//	перенос строки
 4e0:	8d e0       	ldi	r24, 0x0D	; 13
 4e2:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z9send_Uarth>
	
	init_pwm();
 4e6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z8init_pwmv>
	externalIntInit();
 4ea:	0e 94 05 01 	call	0x20a	; 0x20a <_Z15externalIntInitv>
	initTimer();
 4ee:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_Z9initTimerv>
	PortsInit();
 4f2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_Z9PortsInitv>

	send_int_Uart(OCR2);
 4f6:	83 b5       	in	r24, 0x23	; 35
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 65 00 	call	0xca	; 0xca <_Z13send_int_Uartj>
	send_int_Uart(OCR0);
 4fe:	8c b7       	in	r24, 0x3c	; 60
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 65 00 	call	0xca	; 0xca <_Z13send_int_Uartj>
	
	PORTC |= (1<<PC7);
 506:	af 9a       	sbi	0x15, 7	; 21
 508:	2f e3       	ldi	r18, 0x3F	; 63
 50a:	8d e0       	ldi	r24, 0x0D	; 13
 50c:	93 e0       	ldi	r25, 0x03	; 3
 50e:	21 50       	subi	r18, 0x01	; 1
 510:	80 40       	sbci	r24, 0x00	; 0
 512:	90 40       	sbci	r25, 0x00	; 0
 514:	e1 f7       	brne	.-8      	; 0x50e <main+0x5a>
 516:	00 c0       	rjmp	.+0      	; 0x518 <main+0x64>
 518:	00 00       	nop
	_delay_ms(1000);
	PORTC &= ~(1<<PC7);
 51a:	af 98       	cbi	0x15, 7	; 21
 51c:	2f e3       	ldi	r18, 0x3F	; 63
 51e:	8d e0       	ldi	r24, 0x0D	; 13
 520:	93 e0       	ldi	r25, 0x03	; 3
 522:	21 50       	subi	r18, 0x01	; 1
 524:	80 40       	sbci	r24, 0x00	; 0
 526:	90 40       	sbci	r25, 0x00	; 0
 528:	e1 f7       	brne	.-8      	; 0x522 <main+0x6e>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <main+0x78>
 52c:	00 00       	nop
	_delay_ms(1000);
     
  	while(1){
			MoveForward();
 52e:	0e 94 b7 01 	call	0x36e	; 0x36e <_Z11MoveForwardv>
 532:	fd cf       	rjmp	.-6      	; 0x52e <main+0x7a>

00000534 <__umulhisi3>:
 534:	a2 9f       	mul	r26, r18
 536:	b0 01       	movw	r22, r0
 538:	b3 9f       	mul	r27, r19
 53a:	c0 01       	movw	r24, r0
 53c:	a3 9f       	mul	r26, r19
 53e:	70 0d       	add	r23, r0
 540:	81 1d       	adc	r24, r1
 542:	11 24       	eor	r1, r1
 544:	91 1d       	adc	r25, r1
 546:	b2 9f       	mul	r27, r18
 548:	70 0d       	add	r23, r0
 54a:	81 1d       	adc	r24, r1
 54c:	11 24       	eor	r1, r1
 54e:	91 1d       	adc	r25, r1
 550:	08 95       	ret

00000552 <_exit>:
 552:	f8 94       	cli

00000554 <__stop_program>:
 554:	ff cf       	rjmp	.-2      	; 0x554 <__stop_program>
