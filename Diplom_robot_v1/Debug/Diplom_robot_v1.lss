
Diplom_robot_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000370  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000370  00000404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800070  00800070  00000414  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004d7  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f2  00000000  00000000  00000993  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023c  00000000  00000000  00000b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00000dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031e  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a6  00000000  00000000  00001222  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_1>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
  8a:	0c 94 b6 01 	jmp	0x36c	; 0x36c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z9init_UARTv>:


void init_UART()
{
	//	Установка скорости 9600
	UBRRH=0;	//	UBRR=f/(16*band)-1 f=8000000Гц band=9600, 
  92:	10 bc       	out	0x20, r1	; 32
	UBRRL=51;	//	нормальный асинхронный двунаправленный режим работы
  94:	83 e3       	ldi	r24, 0x33	; 51
  96:	89 b9       	out	0x09, r24	; 9
//			||||DOR		-	ошибка переполнение буфера
//			|||||PE		-	ошибка чётности
//			||||||U2X	-	Двойная скорость
//			|||||||MPCM	-	Многопроцессорный режим
//			76543210
	UCSRA=0b00000000;
  98:	1b b8       	out	0x0b, r1	; 11
//			||||TXEN	-	разрешение передачи
//			|||||UCSZ2	-	UCSZ0:2 размер кадра данных
//			||||||RXB8	-	9 бит принятых данных
//			|||||||TXB8	-	9 бит переданных данных
//			76543210
	UCSRB=0b00011000;	//	разрешен приём и передача по UART
  9a:	88 e1       	ldi	r24, 0x18	; 24
  9c:	8a b9       	out	0x0a, r24	; 10
//			||||USBS	-	топ биты: 0-1, 1-2
//			|||||UCSZ1	-	UCSZ0:2 размер кадра данных
//			||||||UCSZ0	-	UCSZ0:2 размер кадра данных
//			|||||||UCPOL-	в синхронном режиме - тактирование
//			76543210
	UCSRC=0b10000110;	//	8-битовая посылка
  9e:	86 e8       	ldi	r24, 0x86	; 134
  a0:	80 bd       	out	0x20, r24	; 32
  a2:	08 95       	ret

000000a4 <_Z8init_pwmv>:
}

void init_pwm()
{
	TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS01);
  a4:	83 b7       	in	r24, 0x33	; 51
  a6:	8a 66       	ori	r24, 0x6A	; 106
  a8:	83 bf       	out	0x33, r24	; 51
	OCR0 = 0x00; //начальное состояние 0
  aa:	1c be       	out	0x3c, r1	; 60
	
	TCCR2|=(1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS21);
  ac:	85 b5       	in	r24, 0x25	; 37
  ae:	8a 66       	ori	r24, 0x6A	; 106
  b0:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0x00; //начальное состояние 0
  b2:	13 bc       	out	0x23, r1	; 35
	
	TCCR1A = (1<<COM1A1)|(1<<WGM10)|(1<<COM1B1)|(1<<WGM12);
  b4:	89 ea       	ldi	r24, 0xA9	; 169
  b6:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<CS11); //предделитель = 1
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0x00; //начальное состо¤ние 0
  bc:	1b bc       	out	0x2b, r1	; 43
  be:	1a bc       	out	0x2a, r1	; 42
	
	DDRD |= (1<<PD7)|(1<<PD4)|(1<<PD5);
  c0:	81 b3       	in	r24, 0x11	; 17
  c2:	80 6b       	ori	r24, 0xB0	; 176
  c4:	81 bb       	out	0x11, r24	; 17
	DDRB |= (1<<PB3);
  c6:	bb 9a       	sbi	0x17, 3	; 23
  c8:	08 95       	ret

000000ca <_Z9int0_initv>:
}

void int0_init( void )
{
	//настраиваем на срабатывание INT0 по переднему фронту
	MCUCR |= (1<<ISC01)|(1<<ISC00);
  ca:	85 b7       	in	r24, 0x35	; 53
  cc:	83 60       	ori	r24, 0x03	; 3
  ce:	85 bf       	out	0x35, r24	; 53
	//разрешаем внешнее прерывание INT0
	GICR |= (1<<INT0);
  d0:	8b b7       	in	r24, 0x3b	; 59
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	8b bf       	out	0x3b, r24	; 59
	sei();
  d6:	78 94       	sei
  d8:	08 95       	ret

000000da <__vector_1>:
}

ISR( INT0_vect )
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
	int0Led++;
  e8:	80 91 62 00 	lds	r24, 0x0062
  ec:	90 91 63 00 	lds	r25, 0x0063
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	90 93 63 00 	sts	0x0063, r25
  f6:	80 93 62 00 	sts	0x0062, r24
		//PORTC = 0b00000001;			//	Включаем диод PC0 = 1 = Vcc
}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_2>:

ISR( INT1_vect ){
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
	int0Led++;
 116:	80 91 62 00 	lds	r24, 0x0062
 11a:	90 91 63 00 	lds	r25, 0x0063
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	90 93 63 00 	sts	0x0063, r25
 124:	80 93 62 00 	sts	0x0062, r24
	//PORTC = 0b00000001;			//	Включаем диод PC0 = 1 = Vcc
}
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <__vector_9>:

ISR(TIMER0_OVF_vect){
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
	
}
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <__vector_4>:

ISR(TIMER2_OVF_vect){
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
	
}
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <_Z9send_Uarth>:


//	UART
void send_Uart(unsigned char c)//	Отправка байта
{
	while(!(UCSRA&(1<<UDRE)))	//	Устанавливается, когда регистр свободен
 15e:	5d 9b       	sbis	0x0b, 5	; 11
 160:	fe cf       	rjmp	.-4      	; 0x15e <_Z9send_Uarth>
	{}
	UDR = c;
 162:	8c b9       	out	0x0c, r24	; 12
 164:	08 95       	ret

00000166 <_Z13send_Uart_strPKc>:
}

void send_Uart_str(const char *s)//	Отправка строки
{
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	ec 01       	movw	r28, r24
	while (*s != 0) send_Uart(*s++);
 16c:	88 81       	ld	r24, Y
 16e:	88 23       	and	r24, r24
 170:	31 f0       	breq	.+12     	; 0x17e <_Z13send_Uart_strPKc+0x18>
 172:	21 96       	adiw	r28, 0x01	; 1
 174:	0e 94 af 00 	call	0x15e	; 0x15e <_Z9send_Uarth>
 178:	89 91       	ld	r24, Y+
 17a:	81 11       	cpse	r24, r1
 17c:	fb cf       	rjmp	.-10     	; 0x174 <_Z13send_Uart_strPKc+0xe>
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <_Z13send_int_Uartj>:

void send_int_Uart(unsigned int c)//	Отправка числа от 0000 до 9999
{
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	ac 01       	movw	r20, r24
	unsigned char temp;
	c=c%10000;
 192:	9c 01       	movw	r18, r24
 194:	32 95       	swap	r19
 196:	22 95       	swap	r18
 198:	2f 70       	andi	r18, 0x0F	; 15
 19a:	23 27       	eor	r18, r19
 19c:	3f 70       	andi	r19, 0x0F	; 15
 19e:	23 27       	eor	r18, r19
 1a0:	a7 e4       	ldi	r26, 0x47	; 71
 1a2:	b3 e0       	ldi	r27, 0x03	; 3
 1a4:	0e 94 a7 01 	call	0x34e	; 0x34e <__umulhisi3>
 1a8:	ec 01       	movw	r28, r24
 1aa:	d6 95       	lsr	r29
 1ac:	c7 95       	ror	r28
 1ae:	d6 95       	lsr	r29
 1b0:	c7 95       	ror	r28
 1b2:	d6 95       	lsr	r29
 1b4:	c7 95       	ror	r28
 1b6:	20 e1       	ldi	r18, 0x10	; 16
 1b8:	37 e2       	ldi	r19, 0x27	; 39
 1ba:	c2 9f       	mul	r28, r18
 1bc:	c0 01       	movw	r24, r0
 1be:	c3 9f       	mul	r28, r19
 1c0:	90 0d       	add	r25, r0
 1c2:	d2 9f       	mul	r29, r18
 1c4:	90 0d       	add	r25, r0
 1c6:	11 24       	eor	r1, r1
 1c8:	ea 01       	movw	r28, r20
 1ca:	c8 1b       	sub	r28, r24
 1cc:	d9 0b       	sbc	r29, r25
	temp=c/100;
 1ce:	9e 01       	movw	r18, r28
 1d0:	36 95       	lsr	r19
 1d2:	27 95       	ror	r18
 1d4:	36 95       	lsr	r19
 1d6:	27 95       	ror	r18
 1d8:	ab e7       	ldi	r26, 0x7B	; 123
 1da:	b4 e1       	ldi	r27, 0x14	; 20
 1dc:	0e 94 a7 01 	call	0x34e	; 0x34e <__umulhisi3>
 1e0:	8c 01       	movw	r16, r24
 1e2:	16 95       	lsr	r17
 1e4:	07 95       	ror	r16
	send_Uart(temp/10+'0');
 1e6:	0f 2e       	mov	r0, r31
 1e8:	fd ec       	ldi	r31, 0xCD	; 205
 1ea:	ff 2e       	mov	r15, r31
 1ec:	f0 2d       	mov	r31, r0
 1ee:	0f 9d       	mul	r16, r15
 1f0:	e1 2c       	mov	r14, r1
 1f2:	11 24       	eor	r1, r1
 1f4:	e6 94       	lsr	r14
 1f6:	e6 94       	lsr	r14
 1f8:	e6 94       	lsr	r14
 1fa:	80 e3       	ldi	r24, 0x30	; 48
 1fc:	8e 0d       	add	r24, r14
 1fe:	0e 94 af 00 	call	0x15e	; 0x15e <_Z9send_Uarth>
	send_Uart(temp%10+'0');
 202:	ee 0c       	add	r14, r14
 204:	8e 2d       	mov	r24, r14
 206:	88 0f       	add	r24, r24
 208:	88 0f       	add	r24, r24
 20a:	e8 0e       	add	r14, r24
 20c:	80 2f       	mov	r24, r16
 20e:	8e 19       	sub	r24, r14
 210:	80 5d       	subi	r24, 0xD0	; 208
 212:	0e 94 af 00 	call	0x15e	; 0x15e <_Z9send_Uarth>
	temp=c%100;
 216:	24 e6       	ldi	r18, 0x64	; 100
 218:	20 9f       	mul	r18, r16
 21a:	c0 01       	movw	r24, r0
 21c:	21 9f       	mul	r18, r17
 21e:	90 0d       	add	r25, r0
 220:	11 24       	eor	r1, r1
 222:	c8 1b       	sub	r28, r24
 224:	d9 0b       	sbc	r29, r25
	send_Uart(temp/10+'0');
 226:	cf 9d       	mul	r28, r15
 228:	d1 2d       	mov	r29, r1
 22a:	11 24       	eor	r1, r1
 22c:	d6 95       	lsr	r29
 22e:	d6 95       	lsr	r29
 230:	d6 95       	lsr	r29
 232:	80 e3       	ldi	r24, 0x30	; 48
 234:	8d 0f       	add	r24, r29
 236:	0e 94 af 00 	call	0x15e	; 0x15e <_Z9send_Uarth>
	send_Uart(temp%10+'0');
 23a:	dd 0f       	add	r29, r29
 23c:	8d 2f       	mov	r24, r29
 23e:	88 0f       	add	r24, r24
 240:	88 0f       	add	r24, r24
 242:	d8 0f       	add	r29, r24
 244:	8c 2f       	mov	r24, r28
 246:	8d 1b       	sub	r24, r29
 248:	80 5d       	subi	r24, 0xD0	; 208
 24a:	0e 94 af 00 	call	0x15e	; 0x15e <_Z9send_Uarth>
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	08 95       	ret

0000025c <main>:
	return UDR;
}

int main()
{
	init_UART();					//	инициализация UART
 25c:	0e 94 49 00 	call	0x92	; 0x92 <_Z9init_UARTv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 260:	2f e3       	ldi	r18, 0x3F	; 63
 262:	8d e0       	ldi	r24, 0x0D	; 13
 264:	93 e0       	ldi	r25, 0x03	; 3
 266:	21 50       	subi	r18, 0x01	; 1
 268:	80 40       	sbci	r24, 0x00	; 0
 26a:	90 40       	sbci	r25, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <main+0xa>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <main+0x14>
 270:	00 00       	nop
	_delay_ms(1000);				//	задержка 1c
	send_Uart_str("alex-exe.ru");	//	отправка строки
 272:	84 e6       	ldi	r24, 0x64	; 100
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 b3 00 	call	0x166	; 0x166 <_Z13send_Uart_strPKc>
	send_Uart(13);					//	перенос строки
 27a:	8d e0       	ldi	r24, 0x0D	; 13
 27c:	0e 94 af 00 	call	0x15e	; 0x15e <_Z9send_Uarth>
	send_int_Uart(2013);			//	отправка числа
 280:	8d ed       	ldi	r24, 0xDD	; 221
 282:	97 e0       	ldi	r25, 0x07	; 7
 284:	0e 94 c2 00 	call	0x184	; 0x184 <_Z13send_int_Uartj>
	send_Uart(13);					//	перенос строки
 288:	8d e0       	ldi	r24, 0x0D	; 13
 28a:	0e 94 af 00 	call	0x15e	; 0x15e <_Z9send_Uarth>
	
	init_pwm();
 28e:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z8init_pwmv>
	int0_init();
 292:	0e 94 65 00 	call	0xca	; 0xca <_Z9int0_initv>
	
	DDRA = 0xFF;
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	8a bb       	out	0x1a, r24	; 26
	DDRC |= (1<<PC7);
 29a:	a7 9a       	sbi	0x14, 7	; 20
	PORTA |= (1<<PA4) | (1<<PA6);
 29c:	8b b3       	in	r24, 0x1b	; 27
 29e:	80 65       	ori	r24, 0x50	; 80
 2a0:	8b bb       	out	0x1b, r24	; 27
	
	WholePWM = 180;
 2a2:	84 eb       	ldi	r24, 0xB4	; 180
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	90 93 75 00 	sts	0x0075, r25
 2aa:	80 93 74 00 	sts	0x0074, r24
	OCR2 = (WholePWM+LeftBalancePWM)*Spiral;
 2ae:	80 91 72 00 	lds	r24, 0x0072
 2b2:	90 91 73 00 	lds	r25, 0x0073
 2b6:	8c 54       	subi	r24, 0x4C	; 76
 2b8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ba:	90 91 60 00 	lds	r25, 0x0060
 2be:	98 9f       	mul	r25, r24
 2c0:	80 2d       	mov	r24, r0
 2c2:	11 24       	eor	r1, r1
 2c4:	83 bd       	out	0x23, r24	; 35
	OCR0 = WholePWM+RightBalancePWM;
 2c6:	90 91 70 00 	lds	r25, 0x0070
 2ca:	80 91 74 00 	lds	r24, 0x0074
 2ce:	89 0f       	add	r24, r25
 2d0:	8c bf       	out	0x3c, r24	; 60
	OCR1A = WholePWM+RightBalancePWM;
 2d2:	20 91 74 00 	lds	r18, 0x0074
 2d6:	30 91 75 00 	lds	r19, 0x0075
 2da:	80 91 70 00 	lds	r24, 0x0070
 2de:	90 91 71 00 	lds	r25, 0x0071
 2e2:	82 0f       	add	r24, r18
 2e4:	93 1f       	adc	r25, r19
 2e6:	9b bd       	out	0x2b, r25	; 43
 2e8:	8a bd       	out	0x2a, r24	; 42
	OCR1B = WholePWM+RightBalancePWM;
 2ea:	20 91 74 00 	lds	r18, 0x0074
 2ee:	30 91 75 00 	lds	r19, 0x0075
 2f2:	80 91 70 00 	lds	r24, 0x0070
 2f6:	90 91 71 00 	lds	r25, 0x0071
 2fa:	82 0f       	add	r24, r18
 2fc:	93 1f       	adc	r25, r19
 2fe:	99 bd       	out	0x29, r25	; 41
 300:	88 bd       	out	0x28, r24	; 40
	send_int_Uart(OCR2);
 302:	83 b5       	in	r24, 0x23	; 35
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 c2 00 	call	0x184	; 0x184 <_Z13send_int_Uartj>
	send_int_Uart(OCR0);
 30a:	8c b7       	in	r24, 0x3c	; 60
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 c2 00 	call	0x184	; 0x184 <_Z13send_int_Uartj>
	
	PORTC |= (1<<PC7);
 312:	af 9a       	sbi	0x15, 7	; 21
 314:	2f e3       	ldi	r18, 0x3F	; 63
 316:	8d e0       	ldi	r24, 0x0D	; 13
 318:	93 e0       	ldi	r25, 0x03	; 3
 31a:	21 50       	subi	r18, 0x01	; 1
 31c:	80 40       	sbci	r24, 0x00	; 0
 31e:	90 40       	sbci	r25, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <main+0xbe>
 322:	00 c0       	rjmp	.+0      	; 0x324 <main+0xc8>
 324:	00 00       	nop
	_delay_ms(1000);
	PORTC &= ~(1<<PC7);
 326:	af 98       	cbi	0x15, 7	; 21
 328:	2f e3       	ldi	r18, 0x3F	; 63
 32a:	8d e0       	ldi	r24, 0x0D	; 13
 32c:	93 e0       	ldi	r25, 0x03	; 3
 32e:	21 50       	subi	r18, 0x01	; 1
 330:	80 40       	sbci	r24, 0x00	; 0
 332:	90 40       	sbci	r25, 0x00	; 0
 334:	e1 f7       	brne	.-8      	; 0x32e <main+0xd2>
 336:	00 c0       	rjmp	.+0      	; 0x338 <main+0xdc>
 338:	00 00       	nop
				PORTC &= ~(1<<PC7);
				_delay_ms(1000);
			}
			*/
			if((iterator%100) == 0){
				send_int_Uart(int0Led);			//	отправка числа
 33a:	80 91 62 00 	lds	r24, 0x0062
 33e:	90 91 63 00 	lds	r25, 0x0063
 342:	0e 94 c2 00 	call	0x184	; 0x184 <_Z13send_int_Uartj>
				send_Uart(13);					//	перенос строки
 346:	8d e0       	ldi	r24, 0x0D	; 13
 348:	0e 94 af 00 	call	0x15e	; 0x15e <_Z9send_Uarth>
 34c:	f6 cf       	rjmp	.-20     	; 0x33a <main+0xde>

0000034e <__umulhisi3>:
 34e:	a2 9f       	mul	r26, r18
 350:	b0 01       	movw	r22, r0
 352:	b3 9f       	mul	r27, r19
 354:	c0 01       	movw	r24, r0
 356:	a3 9f       	mul	r26, r19
 358:	70 0d       	add	r23, r0
 35a:	81 1d       	adc	r24, r1
 35c:	11 24       	eor	r1, r1
 35e:	91 1d       	adc	r25, r1
 360:	b2 9f       	mul	r27, r18
 362:	70 0d       	add	r23, r0
 364:	81 1d       	adc	r24, r1
 366:	11 24       	eor	r1, r1
 368:	91 1d       	adc	r25, r1
 36a:	08 95       	ret

0000036c <_exit>:
 36c:	f8 94       	cli

0000036e <__stop_program>:
 36e:	ff cf       	rjmp	.-2      	; 0x36e <__stop_program>
