
Diplom_robot_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000260  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000260  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006e  0080006e  00000302  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000360  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001be  00000000  00000000  000006e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001c9  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00000a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000274  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b6  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000f46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  8a:	0c 94 2e 01 	jmp	0x25c	; 0x25c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z9init_UARTv>:
int WholePWM = 0, LeftBalancePWM = 0, RightBalancePWM = 0, Spiral = 1;

void init_UART()
{
	//	Установка скорости 9600
	UBRRH=0;	//	UBRR=f/(16*band)-1 f=8000000Гц band=9600, 
  92:	10 bc       	out	0x20, r1	; 32
	UBRRL=51;	//	нормальный асинхронный двунаправленный режим работы
  94:	83 e3       	ldi	r24, 0x33	; 51
  96:	89 b9       	out	0x09, r24	; 9
//			||||DOR		-	ошибка переполнение буфера
//			|||||PE		-	ошибка чётности
//			||||||U2X	-	Двойная скорость
//			|||||||MPCM	-	Многопроцессорный режим
//			76543210
	UCSRA=0b00000000;
  98:	1b b8       	out	0x0b, r1	; 11
//			||||TXEN	-	разрешение передачи
//			|||||UCSZ2	-	UCSZ0:2 размер кадра данных
//			||||||RXB8	-	9 бит принятых данных
//			|||||||TXB8	-	9 бит переданных данных
//			76543210
	UCSRB=0b00011000;	//	разрешен приём и передача по UART
  9a:	88 e1       	ldi	r24, 0x18	; 24
  9c:	8a b9       	out	0x0a, r24	; 10
//			||||USBS	-	топ биты: 0-1, 1-2
//			|||||UCSZ1	-	UCSZ0:2 размер кадра данных
//			||||||UCSZ0	-	UCSZ0:2 размер кадра данных
//			|||||||UCPOL-	в синхронном режиме - тактирование
//			76543210
	UCSRC=0b10000110;	//	8-битовая посылка
  9e:	86 e8       	ldi	r24, 0x86	; 134
  a0:	80 bd       	out	0x20, r24	; 32
  a2:	08 95       	ret

000000a4 <_Z8init_pwmv>:
}

void init_pwm()
{
	TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS01) |(1<<CS00);
  a4:	83 b7       	in	r24, 0x33	; 51
  a6:	8b 66       	ori	r24, 0x6B	; 107
  a8:	83 bf       	out	0x33, r24	; 51
	OCR0 = 0x00; //начальное состояние 0
  aa:	1c be       	out	0x3c, r1	; 60
	
	TCCR2|=(1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS21) |(1<<CS20);
  ac:	85 b5       	in	r24, 0x25	; 37
  ae:	8b 66       	ori	r24, 0x6B	; 107
  b0:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0x00; //начальное состояние 0
  b2:	13 bc       	out	0x23, r1	; 35
	
	DDRD |= (1<<PD7);
  b4:	8f 9a       	sbi	0x11, 7	; 17
	DDRB |= (1<<PB3);
  b6:	bb 9a       	sbi	0x17, 3	; 23
  b8:	08 95       	ret

000000ba <_Z9send_Uarth>:
*/

//	UART
void send_Uart(unsigned char c)//	Отправка байта
{
	while(!(UCSRA&(1<<UDRE)))	//	Устанавливается, когда регистр свободен
  ba:	5d 9b       	sbis	0x0b, 5	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <_Z9send_Uarth>
	{}
	UDR = c;
  be:	8c b9       	out	0x0c, r24	; 12
  c0:	08 95       	ret

000000c2 <_Z13send_Uart_strPKc>:
}

void send_Uart_str(const char *s)//	Отправка строки
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	ec 01       	movw	r28, r24
	while (*s != 0) send_Uart(*s++);
  c8:	88 81       	ld	r24, Y
  ca:	88 23       	and	r24, r24
  cc:	31 f0       	breq	.+12     	; 0xda <_Z13send_Uart_strPKc+0x18>
  ce:	21 96       	adiw	r28, 0x01	; 1
  d0:	0e 94 5d 00 	call	0xba	; 0xba <_Z9send_Uarth>
  d4:	89 91       	ld	r24, Y+
  d6:	81 11       	cpse	r24, r1
  d8:	fb cf       	rjmp	.-10     	; 0xd0 <_Z13send_Uart_strPKc+0xe>
}
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <_Z13send_int_Uartj>:

void send_int_Uart(unsigned int c)//	Отправка числа от 0000 до 9999
{
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	ac 01       	movw	r20, r24
	unsigned char temp;
	c=c%10000;
  ee:	9c 01       	movw	r18, r24
  f0:	32 95       	swap	r19
  f2:	22 95       	swap	r18
  f4:	2f 70       	andi	r18, 0x0F	; 15
  f6:	23 27       	eor	r18, r19
  f8:	3f 70       	andi	r19, 0x0F	; 15
  fa:	23 27       	eor	r18, r19
  fc:	a7 e4       	ldi	r26, 0x47	; 71
  fe:	b3 e0       	ldi	r27, 0x03	; 3
 100:	0e 94 1f 01 	call	0x23e	; 0x23e <__umulhisi3>
 104:	ec 01       	movw	r28, r24
 106:	d6 95       	lsr	r29
 108:	c7 95       	ror	r28
 10a:	d6 95       	lsr	r29
 10c:	c7 95       	ror	r28
 10e:	d6 95       	lsr	r29
 110:	c7 95       	ror	r28
 112:	20 e1       	ldi	r18, 0x10	; 16
 114:	37 e2       	ldi	r19, 0x27	; 39
 116:	c2 9f       	mul	r28, r18
 118:	c0 01       	movw	r24, r0
 11a:	c3 9f       	mul	r28, r19
 11c:	90 0d       	add	r25, r0
 11e:	d2 9f       	mul	r29, r18
 120:	90 0d       	add	r25, r0
 122:	11 24       	eor	r1, r1
 124:	ea 01       	movw	r28, r20
 126:	c8 1b       	sub	r28, r24
 128:	d9 0b       	sbc	r29, r25
	temp=c/100;
 12a:	9e 01       	movw	r18, r28
 12c:	36 95       	lsr	r19
 12e:	27 95       	ror	r18
 130:	36 95       	lsr	r19
 132:	27 95       	ror	r18
 134:	ab e7       	ldi	r26, 0x7B	; 123
 136:	b4 e1       	ldi	r27, 0x14	; 20
 138:	0e 94 1f 01 	call	0x23e	; 0x23e <__umulhisi3>
 13c:	8c 01       	movw	r16, r24
 13e:	16 95       	lsr	r17
 140:	07 95       	ror	r16
	send_Uart(temp/10+'0');
 142:	0f 2e       	mov	r0, r31
 144:	fd ec       	ldi	r31, 0xCD	; 205
 146:	ff 2e       	mov	r15, r31
 148:	f0 2d       	mov	r31, r0
 14a:	0f 9d       	mul	r16, r15
 14c:	e1 2c       	mov	r14, r1
 14e:	11 24       	eor	r1, r1
 150:	e6 94       	lsr	r14
 152:	e6 94       	lsr	r14
 154:	e6 94       	lsr	r14
 156:	80 e3       	ldi	r24, 0x30	; 48
 158:	8e 0d       	add	r24, r14
 15a:	0e 94 5d 00 	call	0xba	; 0xba <_Z9send_Uarth>
	send_Uart(temp%10+'0');
 15e:	ee 0c       	add	r14, r14
 160:	8e 2d       	mov	r24, r14
 162:	88 0f       	add	r24, r24
 164:	88 0f       	add	r24, r24
 166:	e8 0e       	add	r14, r24
 168:	80 2f       	mov	r24, r16
 16a:	8e 19       	sub	r24, r14
 16c:	80 5d       	subi	r24, 0xD0	; 208
 16e:	0e 94 5d 00 	call	0xba	; 0xba <_Z9send_Uarth>
	temp=c%100;
 172:	24 e6       	ldi	r18, 0x64	; 100
 174:	20 9f       	mul	r18, r16
 176:	c0 01       	movw	r24, r0
 178:	21 9f       	mul	r18, r17
 17a:	90 0d       	add	r25, r0
 17c:	11 24       	eor	r1, r1
 17e:	c8 1b       	sub	r28, r24
 180:	d9 0b       	sbc	r29, r25
	send_Uart(temp/10+'0');
 182:	cf 9d       	mul	r28, r15
 184:	d1 2d       	mov	r29, r1
 186:	11 24       	eor	r1, r1
 188:	d6 95       	lsr	r29
 18a:	d6 95       	lsr	r29
 18c:	d6 95       	lsr	r29
 18e:	80 e3       	ldi	r24, 0x30	; 48
 190:	8d 0f       	add	r24, r29
 192:	0e 94 5d 00 	call	0xba	; 0xba <_Z9send_Uarth>
	send_Uart(temp%10+'0');
 196:	dd 0f       	add	r29, r29
 198:	8d 2f       	mov	r24, r29
 19a:	88 0f       	add	r24, r24
 19c:	88 0f       	add	r24, r24
 19e:	d8 0f       	add	r29, r24
 1a0:	8c 2f       	mov	r24, r28
 1a2:	8d 1b       	sub	r24, r29
 1a4:	80 5d       	subi	r24, 0xD0	; 208
 1a6:	0e 94 5d 00 	call	0xba	; 0xba <_Z9send_Uarth>
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	08 95       	ret

000001b8 <main>:
	return UDR;
}

int main()
{
	init_UART();					//	инициализация UART
 1b8:	0e 94 49 00 	call	0x92	; 0x92 <_Z9init_UARTv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	2f e3       	ldi	r18, 0x3F	; 63
 1be:	8d e0       	ldi	r24, 0x0D	; 13
 1c0:	93 e0       	ldi	r25, 0x03	; 3
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0xa>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0x14>
 1cc:	00 00       	nop
	_delay_ms(1000);				//	задержка 1c
	send_Uart_str("alex-exe.ru");	//	отправка строки
 1ce:	82 e6       	ldi	r24, 0x62	; 98
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z13send_Uart_strPKc>
	send_Uart(13);					//	перенос строки
 1d6:	8d e0       	ldi	r24, 0x0D	; 13
 1d8:	0e 94 5d 00 	call	0xba	; 0xba <_Z9send_Uarth>
	send_int_Uart(2013);			//	отправка числа
 1dc:	8d ed       	ldi	r24, 0xDD	; 221
 1de:	97 e0       	ldi	r25, 0x07	; 7
 1e0:	0e 94 70 00 	call	0xe0	; 0xe0 <_Z13send_int_Uartj>
	send_Uart(13);					//	перенос строки
 1e4:	8d e0       	ldi	r24, 0x0D	; 13
 1e6:	0e 94 5d 00 	call	0xba	; 0xba <_Z9send_Uarth>
	
	init_pwm();
 1ea:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z8init_pwmv>
	
	DDRA = 0xFF;
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1<<PA4) | (1<<PA6);
 1f2:	8b b3       	in	r24, 0x1b	; 27
 1f4:	80 65       	ori	r24, 0x50	; 80
 1f6:	8b bb       	out	0x1b, r24	; 27
	
	WholePWM = 180;
 1f8:	84 eb       	ldi	r24, 0xB4	; 180
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	90 93 73 00 	sts	0x0073, r25
 200:	80 93 72 00 	sts	0x0072, r24
	OCR2 = (WholePWM+LeftBalancePWM)*Spiral;
 204:	80 91 70 00 	lds	r24, 0x0070
 208:	90 91 71 00 	lds	r25, 0x0071
 20c:	8c 54       	subi	r24, 0x4C	; 76
 20e:	9f 4f       	sbci	r25, 0xFF	; 255
 210:	90 91 60 00 	lds	r25, 0x0060
 214:	98 9f       	mul	r25, r24
 216:	80 2d       	mov	r24, r0
 218:	11 24       	eor	r1, r1
 21a:	83 bd       	out	0x23, r24	; 35
	OCR0 = WholePWM+RightBalancePWM;
 21c:	90 91 6e 00 	lds	r25, 0x006E
 220:	80 91 72 00 	lds	r24, 0x0072
 224:	89 0f       	add	r24, r25
 226:	8c bf       	out	0x3c, r24	; 60
	send_int_Uart(OCR2);
 228:	83 b5       	in	r24, 0x23	; 35
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 70 00 	call	0xe0	; 0xe0 <_Z13send_int_Uartj>
	send_int_Uart(OCR0);
 230:	8c b7       	in	r24, 0x3c	; 60
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 70 00 	call	0xe0	; 0xe0 <_Z13send_int_Uartj>
			PORTC &= ~(1<<PC0);			//	Выключаем диод PC0 = 0 = Vcc
		}	*/
		
		
			
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	08 95       	ret

0000023e <__umulhisi3>:
 23e:	a2 9f       	mul	r26, r18
 240:	b0 01       	movw	r22, r0
 242:	b3 9f       	mul	r27, r19
 244:	c0 01       	movw	r24, r0
 246:	a3 9f       	mul	r26, r19
 248:	70 0d       	add	r23, r0
 24a:	81 1d       	adc	r24, r1
 24c:	11 24       	eor	r1, r1
 24e:	91 1d       	adc	r25, r1
 250:	b2 9f       	mul	r27, r18
 252:	70 0d       	add	r23, r0
 254:	81 1d       	adc	r24, r1
 256:	11 24       	eor	r1, r1
 258:	91 1d       	adc	r25, r1
 25a:	08 95       	ret

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
