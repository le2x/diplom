
toDipl1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000022a  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000033f  00000000  00000000  00000322  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a4  00000000  00000000  00000661  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001b3  00000000  00000000  00000805  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  000009b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000206  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001b6  00000000  00000000  00000c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  7a:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z9init_UARTv>:
#include <util/delay.h>		//	для _delay_ms()

void init_UART(void)
{
	//	Установка скорости 9600
	UBRRH=0;	//	UBRR=f/(16*band)-1 f=8000000Гц band=9600,
  82:	10 bc       	out	0x20, r1	; 32
	UBRRL=51;	//	нормальный асинхронный двунаправленный режим работы
  84:	83 e3       	ldi	r24, 0x33	; 51
  86:	89 b9       	out	0x09, r24	; 9
	//			||||DOR		-	ошибка переполнение буфера
	//			|||||PE		-	ошибка чётности
	//			||||||U2X	-	Двойная скорость
	//			|||||||MPCM	-	Многопроцессорный режим
	//			76543210
	UCSRA=0b00000000;
  88:	1b b8       	out	0x0b, r1	; 11
	//			||||TXEN	-	разрешение передачи
	//			|||||UCSZ2	-	UCSZ0:2 размер кадра данных
	//			||||||RXB8	-	9 бит принятых данных
	//			|||||||TXB8	-	9 бит переданных данных
	//			76543210
	UCSRB=0b00011000;	//	разрешен приём и передача по UART
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	8a b9       	out	0x0a, r24	; 10
	//			||||USBS	-	топ биты: 0-1, 1-2
	//			|||||UCSZ1	-	UCSZ0:2 размер кадра данных
	//			||||||UCSZ0	-	UCSZ0:2 размер кадра данных
	//			|||||||UCPOL-	в синхронном режиме - тактирование
	//			76543210
	UCSRC=0b10000110;	//	8-битовая посылка
  8e:	86 e8       	ldi	r24, 0x86	; 134
  90:	80 bd       	out	0x20, r24	; 32
  92:	08 95       	ret

00000094 <_Z9send_Uarth>:
}

//	UART
void send_Uart(unsigned char c)//	Отправка байта
{
	while(!(UCSRA&(1<<UDRE)))	//	Устанавливается, когда регистр свободен
  94:	5d 9b       	sbis	0x0b, 5	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <_Z9send_Uarth>
	{}
	UDR = c;
  98:	8c b9       	out	0x0c, r24	; 12
  9a:	08 95       	ret

0000009c <_Z13send_Uart_strPc>:
}

void send_Uart_str(char *s)//	Отправка строки
{
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	ec 01       	movw	r28, r24
	while (*s != 0) send_Uart(*s++);
  a2:	88 81       	ld	r24, Y
  a4:	88 23       	and	r24, r24
  a6:	31 f0       	breq	.+12     	; 0xb4 <_Z13send_Uart_strPc+0x18>
  a8:	21 96       	adiw	r28, 0x01	; 1
  aa:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9send_Uarth>
  ae:	89 91       	ld	r24, Y+
  b0:	81 11       	cpse	r24, r1
  b2:	fb cf       	rjmp	.-10     	; 0xaa <_Z13send_Uart_strPc+0xe>
}
  b4:	df 91       	pop	r29
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <_Z13send_int_Uartj>:

void send_int_Uart(unsigned int c)//	Отправка числа от 0000 до 9999
{
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	ac 01       	movw	r20, r24
	unsigned char temp;
	c=c%10000;
  c8:	9c 01       	movw	r18, r24
  ca:	32 95       	swap	r19
  cc:	22 95       	swap	r18
  ce:	2f 70       	andi	r18, 0x0F	; 15
  d0:	23 27       	eor	r18, r19
  d2:	3f 70       	andi	r19, 0x0F	; 15
  d4:	23 27       	eor	r18, r19
  d6:	a7 e4       	ldi	r26, 0x47	; 71
  d8:	b3 e0       	ldi	r27, 0x03	; 3
  da:	0e 94 04 01 	call	0x208	; 0x208 <__umulhisi3>
  de:	ec 01       	movw	r28, r24
  e0:	d6 95       	lsr	r29
  e2:	c7 95       	ror	r28
  e4:	d6 95       	lsr	r29
  e6:	c7 95       	ror	r28
  e8:	d6 95       	lsr	r29
  ea:	c7 95       	ror	r28
  ec:	20 e1       	ldi	r18, 0x10	; 16
  ee:	37 e2       	ldi	r19, 0x27	; 39
  f0:	c2 9f       	mul	r28, r18
  f2:	c0 01       	movw	r24, r0
  f4:	c3 9f       	mul	r28, r19
  f6:	90 0d       	add	r25, r0
  f8:	d2 9f       	mul	r29, r18
  fa:	90 0d       	add	r25, r0
  fc:	11 24       	eor	r1, r1
  fe:	ea 01       	movw	r28, r20
 100:	c8 1b       	sub	r28, r24
 102:	d9 0b       	sbc	r29, r25
	temp=c/100;
 104:	9e 01       	movw	r18, r28
 106:	36 95       	lsr	r19
 108:	27 95       	ror	r18
 10a:	36 95       	lsr	r19
 10c:	27 95       	ror	r18
 10e:	ab e7       	ldi	r26, 0x7B	; 123
 110:	b4 e1       	ldi	r27, 0x14	; 20
 112:	0e 94 04 01 	call	0x208	; 0x208 <__umulhisi3>
 116:	8c 01       	movw	r16, r24
 118:	16 95       	lsr	r17
 11a:	07 95       	ror	r16
	send_Uart(temp/10+'0');
 11c:	0f 2e       	mov	r0, r31
 11e:	fd ec       	ldi	r31, 0xCD	; 205
 120:	ff 2e       	mov	r15, r31
 122:	f0 2d       	mov	r31, r0
 124:	0f 9d       	mul	r16, r15
 126:	e1 2c       	mov	r14, r1
 128:	11 24       	eor	r1, r1
 12a:	e6 94       	lsr	r14
 12c:	e6 94       	lsr	r14
 12e:	e6 94       	lsr	r14
 130:	80 e3       	ldi	r24, 0x30	; 48
 132:	8e 0d       	add	r24, r14
 134:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9send_Uarth>
	send_Uart(temp%10+'0');
 138:	ee 0c       	add	r14, r14
 13a:	8e 2d       	mov	r24, r14
 13c:	88 0f       	add	r24, r24
 13e:	88 0f       	add	r24, r24
 140:	e8 0e       	add	r14, r24
 142:	80 2f       	mov	r24, r16
 144:	8e 19       	sub	r24, r14
 146:	80 5d       	subi	r24, 0xD0	; 208
 148:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9send_Uarth>
	temp=c%100;
 14c:	24 e6       	ldi	r18, 0x64	; 100
 14e:	20 9f       	mul	r18, r16
 150:	c0 01       	movw	r24, r0
 152:	21 9f       	mul	r18, r17
 154:	90 0d       	add	r25, r0
 156:	11 24       	eor	r1, r1
 158:	c8 1b       	sub	r28, r24
 15a:	d9 0b       	sbc	r29, r25
	send_Uart(temp/10+'0');
 15c:	cf 9d       	mul	r28, r15
 15e:	d1 2d       	mov	r29, r1
 160:	11 24       	eor	r1, r1
 162:	d6 95       	lsr	r29
 164:	d6 95       	lsr	r29
 166:	d6 95       	lsr	r29
 168:	80 e3       	ldi	r24, 0x30	; 48
 16a:	8d 0f       	add	r24, r29
 16c:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9send_Uarth>
	send_Uart(temp%10+'0');
 170:	dd 0f       	add	r29, r29
 172:	8d 2f       	mov	r24, r29
 174:	88 0f       	add	r24, r24
 176:	88 0f       	add	r24, r24
 178:	d8 0f       	add	r29, r24
 17a:	8c 2f       	mov	r24, r28
 17c:	8d 1b       	sub	r24, r29
 17e:	80 5d       	subi	r24, 0xD0	; 208
 180:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9send_Uarth>
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	ff 90       	pop	r15
 18e:	ef 90       	pop	r14
 190:	08 95       	ret

00000192 <_Z10getch_Uartv>:

unsigned char getch_Uart(void)//	Получение байта
{
	while(!(UCSRA&(1<<RXC)))	//	Устанавливается, когда регистр свободен
 192:	5f 9b       	sbis	0x0b, 7	; 11
 194:	fe cf       	rjmp	.-4      	; 0x192 <_Z10getch_Uartv>
	{}
	return UDR;
 196:	8c b1       	in	r24, 0x0c	; 12
}
 198:	08 95       	ret

0000019a <main>:


int main(void)
{
	DDRC |= (1<<PC7);
 19a:	a7 9a       	sbi	0x14, 7	; 20
	PORTC = 0b00000000;	
 19c:	15 ba       	out	0x15, r1	; 21
        init_UART();					//	инициализация UART
 19e:	0e 94 41 00 	call	0x82	; 0x82 <_Z9init_UARTv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	89 e6       	ldi	r24, 0x69	; 105
 1a6:	98 e1       	ldi	r25, 0x18	; 24
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0xe>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x18>
 1b2:	00 00       	nop
        _delay_ms(1000);				//	задержка 1c
        send_Uart_str("alex-exe.ru");	//	отправка строки
 1b4:	80 e6       	ldi	r24, 0x60	; 96
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 4e 00 	call	0x9c	; 0x9c <_Z13send_Uart_strPc>
        send_Uart(13);					//	перенос строки
 1bc:	8d e0       	ldi	r24, 0x0D	; 13
 1be:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9send_Uarth>
        send_int_Uart(2013);			//	отправка числа
 1c2:	8d ed       	ldi	r24, 0xDD	; 221
 1c4:	97 e0       	ldi	r25, 0x07	; 7
 1c6:	0e 94 5d 00 	call	0xba	; 0xba <_Z13send_int_Uartj>
        send_Uart(13);					//	перенос строки
 1ca:	8d e0       	ldi	r24, 0x0D	; 13
 1cc:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9send_Uarth>
        while(1)						//	бесконечный рабочий цикл
        {
	        if(UCSRA&(1<<RXC))			//	если пришёл байт по UART
 1d0:	5f 9b       	sbis	0x0b, 7	; 11
 1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <main+0x36>
	        {
		        send_Uart(getch_Uart()+1);	//	отвечаем увеличенным на 1 пришедшим байтом
 1d4:	0e 94 c9 00 	call	0x192	; 0x192 <_Z10getch_Uartv>
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9send_Uarth>
		        // LED on					//	и мигнём диодом
		        PORTC |= (1<<PC7);			//	Включаем диод PC0 = 1 = Vcc
 1de:	af 9a       	sbi	0x15, 7	; 21
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
 1e2:	89 e6       	ldi	r24, 0x69	; 105
 1e4:	98 e1       	ldi	r25, 0x18	; 24
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <main+0x4c>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x56>
 1f0:	00 00       	nop
		        _delay_ms(1000);				//	задержка 50мс
		        // LED off
		        PORTC &= ~(1<<PC7);	
 1f2:	af 98       	cbi	0x15, 7	; 21
 1f4:	2f ef       	ldi	r18, 0xFF	; 255
 1f6:	89 e6       	ldi	r24, 0x69	; 105
 1f8:	98 e1       	ldi	r25, 0x18	; 24
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <main+0x60>
 202:	00 c0       	rjmp	.+0      	; 0x204 <main+0x6a>
 204:	00 00       	nop
 206:	e4 cf       	rjmp	.-56     	; 0x1d0 <main+0x36>

00000208 <__umulhisi3>:
 208:	a2 9f       	mul	r26, r18
 20a:	b0 01       	movw	r22, r0
 20c:	b3 9f       	mul	r27, r19
 20e:	c0 01       	movw	r24, r0
 210:	a3 9f       	mul	r26, r19
 212:	70 0d       	add	r23, r0
 214:	81 1d       	adc	r24, r1
 216:	11 24       	eor	r1, r1
 218:	91 1d       	adc	r25, r1
 21a:	b2 9f       	mul	r27, r18
 21c:	70 0d       	add	r23, r0
 21e:	81 1d       	adc	r24, r1
 220:	11 24       	eor	r1, r1
 222:	91 1d       	adc	r25, r1
 224:	08 95       	ret

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
