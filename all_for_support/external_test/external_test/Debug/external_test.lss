
external_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000002a4  00000338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006c  0080006c  00000344  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000344  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f0  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e0  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00000ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c9  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a1  00000000  00000000  00000d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000102a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 06 01 	call	0x20c	; 0x20c <main>
  8a:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_UART>:
//=======================UART=================

void init_UART(void)
{
	//	Установка скорости 9600
	UBRRH=0;	//	UBRR=f/(16*band)-1 f=8000000Гц band=9600,
  92:	10 bc       	out	0x20, r1	; 32
	UBRRL=51;	//	нормальный асинхронный двунаправленный режим работы
  94:	83 e3       	ldi	r24, 0x33	; 51
  96:	89 b9       	out	0x09, r24	; 9
	//			||||DOR		-	ошибка переполнение буфера
	//			|||||PE		-	ошибка чётности
	//			||||||U2X	-	Двойная скорость
	//			|||||||MPCM	-	Многопроцессорный режим
	//			76543210
	UCSRA=0b00000000;
  98:	1b b8       	out	0x0b, r1	; 11
	//			||||TXEN	-	разрешение передачи
	//			|||||UCSZ2	-	UCSZ0:2 размер кадра данных
	//			||||||RXB8	-	9 бит принятых данных
	//			|||||||TXB8	-	9 бит переданных данных
	//			76543210
	UCSRB=0b00011000;	//	разрешен приём и передача по UART
  9a:	88 e1       	ldi	r24, 0x18	; 24
  9c:	8a b9       	out	0x0a, r24	; 10
	//			||||USBS	-	топ биты: 0-1, 1-2
	//			|||||UCSZ1	-	UCSZ0:2 размер кадра данных
	//			||||||UCSZ0	-	UCSZ0:2 размер кадра данных
	//			|||||||UCPOL-	в синхронном режиме - тактирование
	//			76543210
	UCSRC=0b10000110;	//	8-битовая посылка
  9e:	86 e8       	ldi	r24, 0x86	; 134
  a0:	80 bd       	out	0x20, r24	; 32
  a2:	08 95       	ret

000000a4 <send_Uart>:
}

void send_Uart(unsigned char c)//	Отправка байта
{
	while(!(UCSRA&(1<<UDRE)))	//	Устанавливается, когда регистр свободен
  a4:	5d 9b       	sbis	0x0b, 5	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <send_Uart>
	{}
	UDR = c;
  a8:	8c b9       	out	0x0c, r24	; 12
  aa:	08 95       	ret

000000ac <send_Uart_str>:
}

void send_Uart_str(const char *s)//	Отправка строки
{
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	ec 01       	movw	r28, r24
	while (*s != 0) send_Uart(*s++);
  b2:	88 81       	ld	r24, Y
  b4:	88 23       	and	r24, r24
  b6:	31 f0       	breq	.+12     	; 0xc4 <send_Uart_str+0x18>
  b8:	21 96       	adiw	r28, 0x01	; 1
  ba:	0e 94 52 00 	call	0xa4	; 0xa4 <send_Uart>
  be:	89 91       	ld	r24, Y+
  c0:	81 11       	cpse	r24, r1
  c2:	fb cf       	rjmp	.-10     	; 0xba <send_Uart_str+0xe>
}
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <send_int_Uart>:

void send_int_Uart(unsigned int c)//	Отправка числа от 0000 до 9999
{
  ca:	ef 92       	push	r14
  cc:	ff 92       	push	r15
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	ac 01       	movw	r20, r24
	unsigned char temp;
	c=c%10000;
  d8:	9c 01       	movw	r18, r24
  da:	32 95       	swap	r19
  dc:	22 95       	swap	r18
  de:	2f 70       	andi	r18, 0x0F	; 15
  e0:	23 27       	eor	r18, r19
  e2:	3f 70       	andi	r19, 0x0F	; 15
  e4:	23 27       	eor	r18, r19
  e6:	a7 e4       	ldi	r26, 0x47	; 71
  e8:	b3 e0       	ldi	r27, 0x03	; 3
  ea:	0e 94 41 01 	call	0x282	; 0x282 <__umulhisi3>
  ee:	ec 01       	movw	r28, r24
  f0:	d6 95       	lsr	r29
  f2:	c7 95       	ror	r28
  f4:	d6 95       	lsr	r29
  f6:	c7 95       	ror	r28
  f8:	d6 95       	lsr	r29
  fa:	c7 95       	ror	r28
  fc:	20 e1       	ldi	r18, 0x10	; 16
  fe:	37 e2       	ldi	r19, 0x27	; 39
 100:	c2 9f       	mul	r28, r18
 102:	c0 01       	movw	r24, r0
 104:	c3 9f       	mul	r28, r19
 106:	90 0d       	add	r25, r0
 108:	d2 9f       	mul	r29, r18
 10a:	90 0d       	add	r25, r0
 10c:	11 24       	eor	r1, r1
 10e:	ea 01       	movw	r28, r20
 110:	c8 1b       	sub	r28, r24
 112:	d9 0b       	sbc	r29, r25
	temp=c/100;
 114:	9e 01       	movw	r18, r28
 116:	36 95       	lsr	r19
 118:	27 95       	ror	r18
 11a:	36 95       	lsr	r19
 11c:	27 95       	ror	r18
 11e:	ab e7       	ldi	r26, 0x7B	; 123
 120:	b4 e1       	ldi	r27, 0x14	; 20
 122:	0e 94 41 01 	call	0x282	; 0x282 <__umulhisi3>
 126:	8c 01       	movw	r16, r24
 128:	16 95       	lsr	r17
 12a:	07 95       	ror	r16
	send_Uart(temp/10+'0');
 12c:	0f 2e       	mov	r0, r31
 12e:	fd ec       	ldi	r31, 0xCD	; 205
 130:	ff 2e       	mov	r15, r31
 132:	f0 2d       	mov	r31, r0
 134:	0f 9d       	mul	r16, r15
 136:	e1 2c       	mov	r14, r1
 138:	11 24       	eor	r1, r1
 13a:	e6 94       	lsr	r14
 13c:	e6 94       	lsr	r14
 13e:	e6 94       	lsr	r14
 140:	80 e3       	ldi	r24, 0x30	; 48
 142:	8e 0d       	add	r24, r14
 144:	0e 94 52 00 	call	0xa4	; 0xa4 <send_Uart>
	send_Uart(temp%10+'0');
 148:	ee 0c       	add	r14, r14
 14a:	8e 2d       	mov	r24, r14
 14c:	88 0f       	add	r24, r24
 14e:	88 0f       	add	r24, r24
 150:	e8 0e       	add	r14, r24
 152:	80 2f       	mov	r24, r16
 154:	8e 19       	sub	r24, r14
 156:	80 5d       	subi	r24, 0xD0	; 208
 158:	0e 94 52 00 	call	0xa4	; 0xa4 <send_Uart>
	temp=c%100;
 15c:	24 e6       	ldi	r18, 0x64	; 100
 15e:	20 9f       	mul	r18, r16
 160:	c0 01       	movw	r24, r0
 162:	21 9f       	mul	r18, r17
 164:	90 0d       	add	r25, r0
 166:	11 24       	eor	r1, r1
 168:	c8 1b       	sub	r28, r24
 16a:	d9 0b       	sbc	r29, r25
	send_Uart(temp/10+'0');
 16c:	cf 9d       	mul	r28, r15
 16e:	d1 2d       	mov	r29, r1
 170:	11 24       	eor	r1, r1
 172:	d6 95       	lsr	r29
 174:	d6 95       	lsr	r29
 176:	d6 95       	lsr	r29
 178:	80 e3       	ldi	r24, 0x30	; 48
 17a:	8d 0f       	add	r24, r29
 17c:	0e 94 52 00 	call	0xa4	; 0xa4 <send_Uart>
	send_Uart(temp%10+'0');
 180:	dd 0f       	add	r29, r29
 182:	8d 2f       	mov	r24, r29
 184:	88 0f       	add	r24, r24
 186:	88 0f       	add	r24, r24
 188:	d8 0f       	add	r29, r24
 18a:	8c 2f       	mov	r24, r28
 18c:	8d 1b       	sub	r24, r29
 18e:	80 5d       	subi	r24, 0xD0	; 208
 190:	0e 94 52 00 	call	0xa4	; 0xa4 <send_Uart>
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	08 95       	ret

000001a2 <init_pwm>:

//=========================PWM=====================
void init_pwm()
{
	TCCR1A = (1<<COM1A1) | (1<<WGM10);
 1a2:	81 e8       	ldi	r24, 0x81	; 129
 1a4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<CS10); //предделитель = 1
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0x00; //начальное состояние 0
 1aa:	1b bc       	out	0x2b, r1	; 43
 1ac:	1a bc       	out	0x2a, r1	; 42
 1ae:	08 95       	ret

000001b0 <int0_init>:

//настройка внешнего прерывния INT0
void int0_init( void )
{
	//настраиваем на срабатывание INT0 по переднему фронту
	MCUCR |= (1<<ISC00);
 1b0:	85 b7       	in	r24, 0x35	; 53
 1b2:	81 60       	ori	r24, 0x01	; 1
 1b4:	85 bf       	out	0x35, r24	; 53
	//разрешаем внешнее прерывание INT0
	GICR |= (1<<INT0);
 1b6:	8b b7       	in	r24, 0x3b	; 59
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	8b bf       	out	0x3b, r24	; 59
 1bc:	08 95       	ret

000001be <__vector_1>:



//функция обработчик внешнего прерывания INT0
ISR( INT0_vect )
{
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	af 93       	push	r26
 1ce:	bf 93       	push	r27
	int0_cnt++;
 1d0:	80 91 6c 00 	lds	r24, 0x006C
 1d4:	90 91 6d 00 	lds	r25, 0x006D
 1d8:	a0 91 6e 00 	lds	r26, 0x006E
 1dc:	b0 91 6f 00 	lds	r27, 0x006F
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	a1 1d       	adc	r26, r1
 1e4:	b1 1d       	adc	r27, r1
 1e6:	80 93 6c 00 	sts	0x006C, r24
 1ea:	90 93 6d 00 	sts	0x006D, r25
 1ee:	a0 93 6e 00 	sts	0x006E, r26
 1f2:	b0 93 6f 00 	sts	0x006F, r27
	PORTC = 0b00000001;			//	Включаем диод PC0 = 1 = Vcc
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	85 bb       	out	0x15, r24	; 21
}
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <main>:
int main( )
{
	//временная переменная
	unsigned long tmp;
	int i = 0;
	DDRC = 0xff;
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	84 bb       	out	0x14, r24	; 20
	init_pwm();
 210:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <init_pwm>

	int0_init();
 214:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <int0_init>
	
	init_UART();					//	инициализация UART
 218:	0e 94 49 00 	call	0x92	; 0x92 <init_UART>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21c:	2f e3       	ldi	r18, 0x3F	; 63
 21e:	8d e0       	ldi	r24, 0x0D	; 13
 220:	93 e0       	ldi	r25, 0x03	; 3
 222:	21 50       	subi	r18, 0x01	; 1
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	90 40       	sbci	r25, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <main+0x16>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x20>
 22c:	00 00       	nop
	_delay_ms(1000);				//	задержка 1c
	send_Uart_str("alex-exe.ru");	//	отправка строки
 22e:	80 e6       	ldi	r24, 0x60	; 96
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 56 00 	call	0xac	; 0xac <send_Uart_str>
	send_Uart(13);					//	перенос строки
 236:	8d e0       	ldi	r24, 0x0D	; 13
 238:	0e 94 52 00 	call	0xa4	; 0xa4 <send_Uart>
	send_int_Uart(2013);			//	отправка числа
 23c:	8d ed       	ldi	r24, 0xDD	; 221
 23e:	97 e0       	ldi	r25, 0x07	; 7
 240:	0e 94 65 00 	call	0xca	; 0xca <send_int_Uart>
	send_Uart(13);
 244:	8d e0       	ldi	r24, 0x0D	; 13
 246:	0e 94 52 00 	call	0xa4	; 0xa4 <send_Uart>

	sei();
 24a:	78 94       	sei

int main( )
{
	//временная переменная
	unsigned long tmp;
	int i = 0;
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
			OCR1A++;
			i++;
			_delay_ms(250);
			}else{
			OCR1A = 0x00;
			i=0;
 250:	50 e0       	ldi	r21, 0x00	; 0
 252:	40 e0       	ldi	r20, 0x00	; 0

	sei();

	while(1) {
		
		if(i<255){
 254:	8f 3f       	cpi	r24, 0xFF	; 255
 256:	91 05       	cpc	r25, r1
 258:	74 f4       	brge	.+28     	; 0x276 <main+0x6a>
			OCR1A++;
 25a:	2a b5       	in	r18, 0x2a	; 42
 25c:	3b b5       	in	r19, 0x2b	; 43
 25e:	2f 5f       	subi	r18, 0xFF	; 255
 260:	3f 4f       	sbci	r19, 0xFF	; 255
 262:	3b bd       	out	0x2b, r19	; 43
 264:	2a bd       	out	0x2a, r18	; 42
			i++;
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	e3 e2       	ldi	r30, 0x23	; 35
 26a:	f4 ef       	ldi	r31, 0xF4	; 244
 26c:	31 97       	sbiw	r30, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <main+0x60>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0x66>
 272:	00 00       	nop
 274:	04 c0       	rjmp	.+8      	; 0x27e <main+0x72>
			_delay_ms(250);
			}else{
			OCR1A = 0x00;
 276:	1b bc       	out	0x2b, r1	; 43
 278:	1a bc       	out	0x2a, r1	; 42
			i=0;
 27a:	85 2f       	mov	r24, r21
 27c:	94 2f       	mov	r25, r20
		//разрешаем прерывания
		send_Uart_str( "int0_cnt = ");
		send_int_Uart(int0_cnt);
		send_Uart(13);*/
		//пауза 1 секунда
		PORTC = 0b00000000;			
 27e:	15 ba       	out	0x15, r1	; 21
	}
 280:	e9 cf       	rjmp	.-46     	; 0x254 <main+0x48>

00000282 <__umulhisi3>:
 282:	a2 9f       	mul	r26, r18
 284:	b0 01       	movw	r22, r0
 286:	b3 9f       	mul	r27, r19
 288:	c0 01       	movw	r24, r0
 28a:	a3 9f       	mul	r26, r19
 28c:	70 0d       	add	r23, r0
 28e:	81 1d       	adc	r24, r1
 290:	11 24       	eor	r1, r1
 292:	91 1d       	adc	r25, r1
 294:	b2 9f       	mul	r27, r18
 296:	70 0d       	add	r23, r0
 298:	81 1d       	adc	r24, r1
 29a:	11 24       	eor	r1, r1
 29c:	91 1d       	adc	r25, r1
 29e:	08 95       	ret

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
