
my_car1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000001fd  00800060  00800060  00000316  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000d8  00000000  00000000  00000346  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001044  00000000  00000000  0000041e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000046c  00000000  00000000  00001462  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000056d  00000000  00000000  000018ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000002e0  00000000  00000000  00001e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000003cc  00000000  00000000  0000211c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000015f5  00000000  00000000  000024e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b8  00000000  00000000  00003add  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	22 e0       	ldi	r18, 0x02	; 2
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ad 35       	cpi	r26, 0x5D	; 93
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	2b d0       	rcall	.+86     	; 0x9a <main>
  44:	2c c1       	rjmp	.+600    	; 0x29e <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <presetADC>:


void presetADC()
{
	
	Lcd_init();
  48:	e5 d0       	rcall	.+458    	; 0x214 <Lcd_init>
	
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //делитель 128 64 к√ц
  4a:	86 b1       	in	r24, 0x06	; 6
  4c:	87 68       	ori	r24, 0x87	; 135
  4e:	86 b9       	out	0x06, r24	; 6
	
	ADMUX |= (0<<REFS1) | (1<<REFS0); // опорное напр€жение
  50:	3e 9a       	sbi	0x07, 6	; 7
  52:	08 95       	ret

00000054 <preset>:
	
}

void preset()
{
	DDRD = 0xff;
  54:	8f ef       	ldi	r24, 0xFF	; 255
  56:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
  58:	12 ba       	out	0x12, r1	; 18
  5a:	08 95       	ret

0000005c <readAdc>:
	
}

int readAdc(unsigned int ch){
	
	unsigned char set_admux = ADMUX;
  5c:	27 b1       	in	r18, 0x07	; 7
	
	set_admux &= ~((1<<MUX3) | (1<<MUX2) | (1<<MUX0) | (1<<MUX0));
  5e:	22 7f       	andi	r18, 0xF2	; 242
	
	switch(ch)
  60:	01 97       	sbiw	r24, 0x01	; 1
  62:	09 f4       	brne	.+2      	; 0x66 <readAdc+0xa>
	{
		case 1: set_admux |= (0<<MUX3) | (0<<MUX2) | (0<<MUX1) | (1<<MUX0); break;
  64:	21 60       	ori	r18, 0x01	; 1
		default:break;
	}
	
	ADMUX = set_admux;
  66:	27 b9       	out	0x07, r18	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  68:	8a e1       	ldi	r24, 0x1A	; 26
  6a:	8a 95       	dec	r24
  6c:	f1 f7       	brne	.-4      	; 0x6a <readAdc+0xe>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <readAdc+0x14>
  70:	24 e1       	ldi	r18, 0x14	; 20
  72:	30 e0       	ldi	r19, 0x00	; 0
	
	_delay_us(10);
	
	int tmp = 0;
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int i=0; i<20; i++)
	{
		ADCSRA |= (1<<ADSC);
  78:	36 9a       	sbi	0x06, 6	; 6
		
		while((ADCSRA & (1<<ADSC)));
  7a:	36 99       	sbic	0x06, 6	; 6
  7c:	fe cf       	rjmp	.-4      	; 0x7a <readAdc+0x1e>
		
		tmp = tmp + ADC;
  7e:	44 b1       	in	r20, 0x04	; 4
  80:	55 b1       	in	r21, 0x05	; 5
  82:	84 0f       	add	r24, r20
  84:	95 1f       	adc	r25, r21
  86:	21 50       	subi	r18, 0x01	; 1
  88:	31 09       	sbc	r19, r1
	
	_delay_us(10);
	
	int tmp = 0;
	
	for (int i=0; i<20; i++)
  8a:	21 15       	cp	r18, r1
  8c:	31 05       	cpc	r19, r1
  8e:	a1 f7       	brne	.-24     	; 0x78 <readAdc+0x1c>
		tmp = tmp + ADC;
	}
	
	
	
	return tmp/20;
  90:	64 e1       	ldi	r22, 0x14	; 20
  92:	70 e0       	ldi	r23, 0x00	; 0
  94:	dd d0       	rcall	.+442    	; 0x250 <__divmodhi4>
  96:	cb 01       	movw	r24, r22
}
  98:	08 95       	ret

0000009a <main>:


int main(void)
{	
	short int fotolev = 0, fotoprav = 0;
	presetADC();
  9a:	d6 df       	rcall	.-84     	; 0x48 <presetADC>
	preset();
  9c:	db df       	rcall	.-74     	; 0x54 <preset>
	
    while(1)
    {
		fotoprav = readAdc(0); fotolev = readAdc(1);
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	dc df       	rcall	.-72     	; 0x5c <readAdc>
  a4:	ec 01       	movw	r28, r24
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	d8 df       	rcall	.-80     	; 0x5c <readAdc>
		if (fotoprav > fotolev)
  ac:	8c 17       	cp	r24, r28
  ae:	9d 07       	cpc	r25, r29
  b0:	5c f4       	brge	.+22     	; 0xc8 <main+0x2e>
		{
			PORTD |= (1<<PD0);
  b2:	90 9a       	sbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f e7       	ldi	r18, 0x7F	; 127
  b6:	38 e3       	ldi	r19, 0x38	; 56
  b8:	41 e0       	ldi	r20, 0x01	; 1
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	30 40       	sbci	r19, 0x00	; 0
  be:	40 40       	sbci	r20, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x20>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x2a>
  c4:	00 00       	nop
			_delay_ms(50);
			PORTD &= ~(1<<PD0);
  c6:	90 98       	cbi	0x12, 0	; 18
		} 
		if (fotoprav < fotolev)
  c8:	c8 17       	cp	r28, r24
  ca:	d9 07       	cpc	r29, r25
  cc:	5c f4       	brge	.+22     	; 0xe4 <main+0x4a>
		{
			PORTD |= (1<<PD1);
  ce:	91 9a       	sbi	0x12, 1	; 18
  d0:	2f e7       	ldi	r18, 0x7F	; 127
  d2:	38 e3       	ldi	r19, 0x38	; 56
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	30 40       	sbci	r19, 0x00	; 0
  da:	40 40       	sbci	r20, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x3c>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x46>
  e0:	00 00       	nop
			_delay_ms(50);
			PORTD &= ~(1<<PD1);
  e2:	91 98       	cbi	0x12, 1	; 18
		}
		if (fotoprav == fotolev)
  e4:	c8 17       	cp	r28, r24
  e6:	d9 07       	cpc	r29, r25
  e8:	d1 f6       	brne	.-76     	; 0x9e <main+0x4>
		{
			PORTD |= (1<<PD1);
  ea:	91 9a       	sbi	0x12, 1	; 18
			PORTD |= (1<<PD0);
  ec:	90 9a       	sbi	0x12, 0	; 18
  ee:	8f e7       	ldi	r24, 0x7F	; 127
  f0:	98 e3       	ldi	r25, 0x38	; 56
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	81 50       	subi	r24, 0x01	; 1
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	20 40       	sbci	r18, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x5a>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x64>
  fe:	00 00       	nop
			_delay_ms(50);
			PORTD &= ~(1<<PD1);
 100:	91 98       	cbi	0x12, 1	; 18
			PORTD &= ~(1<<PD0);
 102:	90 98       	cbi	0x12, 0	; 18
 104:	cc cf       	rjmp	.-104    	; 0x9e <main+0x4>

00000106 <LcdSend>:
            b1 =  (c & 0x01) * 3;
            b1 |= (c & 0x02) * 6;
            b1 |= (c & 0x04) * 12;
            b1 |= (c & 0x08) * 24;

            c >>= 4;
 106:	c2 98       	cbi	0x18, 2	; 24
 108:	61 30       	cpi	r22, 0x01	; 1
            // ¬торую часть
            b2 =  (c & 0x01) * 3;
 10a:	11 f4       	brne	.+4      	; 0x110 <LcdSend+0xa>
 10c:	c1 9a       	sbi	0x18, 1	; 24
 10e:	01 c0       	rjmp	.+2      	; 0x112 <LcdSend+0xc>
 110:	c1 98       	cbi	0x18, 1	; 24
 112:	8f b9       	out	0x0f, r24	; 15
            b2 |= (c & 0x02) * 6;
 114:	77 9b       	sbis	0x0e, 7	; 14
 116:	fe cf       	rjmp	.-4      	; 0x114 <LcdSend+0xe>
 118:	c2 9a       	sbi	0x18, 2	; 24
 11a:	08 95       	ret

0000011c <Lcd_clear>:
 11c:	88 ef       	ldi	r24, 0xF8	; 248
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	e5 e6       	ldi	r30, 0x65	; 101
            b2 |= (c & 0x04) * 12;
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	df 01       	movw	r26, r30
 126:	9c 01       	movw	r18, r24
 128:	1d 92       	st	X+, r1
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	30 40       	sbci	r19, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <Lcd_clear+0xc>
 130:	10 92 64 00 	sts	0x0064, r1
 134:	10 92 63 00 	sts	0x0063, r1
            b2 |= (c & 0x08) * 24;
 138:	87 ef       	ldi	r24, 0xF7	; 247
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	90 93 62 00 	sts	0x0062, r25
 140:	80 93 61 00 	sts	0x0061, r24
 144:	81 e0       	ldi	r24, 0x01	; 1

            //  опируем две части в кэш
            LcdCache[tmpIdx++] = b1;
 146:	80 93 60 00 	sts	0x0060, r24
            LcdCache[tmpIdx++] = b1;
 14a:	08 95       	ret

0000014c <Lcd_update>:
 14c:	0f 93       	push	r16
            LcdCache[tmpIdx + 82] = b2;
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
            LcdCache[tmpIdx + 83] = b2;
 152:	df 93       	push	r29
 154:	80 91 63 00 	lds	r24, 0x0063
            LoWaterMark = tmpIdx;
        }

        if ( tmpIdx < 0 ) return OUT_OF_BORDER;

        for ( i = 0; i < 5; i++ )
 158:	90 91 64 00 	lds	r25, 0x0064
 15c:	99 23       	and	r25, r25
 15e:	2c f4       	brge	.+10     	; 0x16a <Lcd_update+0x1e>
            LcdCache[tmpIdx + 82] = b2;
            LcdCache[tmpIdx + 83] = b2;
        }

        // ќбновл€ем x координату курсора
        LcdCacheIdx = (LcdCacheIdx + 11) % LCD_CACHE_SIZE;
 160:	10 92 64 00 	sts	0x0064, r1
 164:	10 92 63 00 	sts	0x0063, r1
 168:	09 c0       	rjmp	.+18     	; 0x17c <Lcd_update+0x30>
 16a:	88 3f       	cpi	r24, 0xF8	; 248
 16c:	91 40       	sbci	r25, 0x01	; 1
 16e:	34 f0       	brlt	.+12     	; 0x17c <Lcd_update+0x30>
 170:	87 ef       	ldi	r24, 0xF7	; 247
    }

    if ( LcdCacheIdx > HiWaterMark )
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	90 93 64 00 	sts	0x0064, r25
 178:	80 93 63 00 	sts	0x0063, r24
 17c:	80 91 61 00 	lds	r24, 0x0061
 180:	90 91 62 00 	lds	r25, 0x0062
 184:	99 23       	and	r25, r25
 186:	2c f4       	brge	.+10     	; 0x192 <Lcd_update+0x46>
    {
        // ќбновл€ем верхнюю границу
        HiWaterMark = LcdCacheIdx;
 188:	10 92 62 00 	sts	0x0062, r1
 18c:	10 92 61 00 	sts	0x0061, r1
    }

    // √оризонтальный разрыв между символами
    LcdCache[LcdCacheIdx] = 0x00;
 190:	09 c0       	rjmp	.+18     	; 0x1a4 <Lcd_update+0x58>
 192:	88 3f       	cpi	r24, 0xF8	; 248
 194:	91 40       	sbci	r25, 0x01	; 1
 196:	34 f0       	brlt	.+12     	; 0x1a4 <Lcd_update+0x58>
    // ≈сли достигли позицию указател€ LCD_CACHE_SIZE - 1, переходим в начало
    if(LcdCacheIdx == (LCD_CACHE_SIZE - 1) )
 198:	87 ef       	ldi	r24, 0xF7	; 247
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	90 93 62 00 	sts	0x0062, r25
    {
        LcdCacheIdx = 0;
 1a0:	80 93 61 00 	sts	0x0061, r24
 1a4:	c0 91 63 00 	lds	r28, 0x0063
        return OK_WITH_WRAP;
 1a8:	d0 91 64 00 	lds	r29, 0x0064
    }
    // »наче просто инкрементируем указатель
    LcdCacheIdx++;
 1ac:	ce 01       	movw	r24, r28
 1ae:	64 e5       	ldi	r22, 0x54	; 84
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	4e d0       	rcall	.+156    	; 0x250 <__divmodhi4>
 1b4:	16 2f       	mov	r17, r22
    return OK;
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	80 68       	ori	r24, 0x80	; 128
        if ( tmpIdx < LoWaterMark )
        {
            LoWaterMark = tmpIdx;
        }

        if ( tmpIdx < 0 ) return OUT_OF_BORDER;
 1ba:	a5 df       	rcall	.-182    	; 0x106 <LcdSend>
        return OK_WITH_WRAP;
    }
    // »наче просто инкрементируем указатель
    LcdCacheIdx++;
    return OK;
}
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	81 2f       	mov	r24, r17
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	a1 df       	rcall	.-190    	; 0x106 <LcdSend>
        // ”станавливаем начальный адрес в соответствии к LoWaterMark
        LcdSend( 0x80 | ( LoWaterMark % LCD_X_RES ), LCD_CMD );
        LcdSend( 0x40 | ( LoWaterMark / LCD_X_RES ), LCD_CMD );

        // ќбновл€ем необходимую часть буфера диспле€
        for ( i = LoWaterMark; i <= HiWaterMark; i++ )
 1c4:	80 91 61 00 	lds	r24, 0x0061
 1c8:	90 91 62 00 	lds	r25, 0x0062
 1cc:	8c 17       	cp	r24, r28
 1ce:	9d 07       	cpc	r25, r29
 1d0:	84 f0       	brlt	.+32     	; 0x1f2 <Lcd_update+0xa6>
 1d2:	8e 01       	movw	r16, r28
 1d4:	0b 59       	subi	r16, 0x9B	; 155
 1d6:	1f 4f       	sbci	r17, 0xFF	; 255
        {
            // ƒл€ оригинального диспле€ не нужно следить за адресом в буфере,
            // можно просто последовательно выводить данные
            LcdSend( LcdCache[i], LCD_DATA );
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	f8 01       	movw	r30, r16
 1dc:	81 91       	ld	r24, Z+
 1de:	8f 01       	movw	r16, r30
 1e0:	92 df       	rcall	.-220    	; 0x106 <LcdSend>
        // ”станавливаем начальный адрес в соответствии к LoWaterMark
        LcdSend( 0x80 | ( LoWaterMark % LCD_X_RES ), LCD_CMD );
        LcdSend( 0x40 | ( LoWaterMark / LCD_X_RES ), LCD_CMD );

        // ќбновл€ем необходимую часть буфера диспле€
        for ( i = LoWaterMark; i <= HiWaterMark; i++ )
 1e2:	21 96       	adiw	r28, 0x01	; 1
 1e4:	80 91 61 00 	lds	r24, 0x0061
 1e8:	90 91 62 00 	lds	r25, 0x0062
 1ec:	8c 17       	cp	r24, r28
 1ee:	9d 07       	cpc	r25, r29
 1f0:	9c f7       	brge	.-26     	; 0x1d8 <Lcd_update+0x8c>
        }

    #endif

    // —брос указателей границ в пустоту
    LoWaterMark = LCD_CACHE_SIZE - 1;
 1f2:	87 ef       	ldi	r24, 0xF7	; 247
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	90 93 64 00 	sts	0x0064, r25
 1fa:	80 93 63 00 	sts	0x0063, r24
    HiWaterMark = 0;
 1fe:	10 92 62 00 	sts	0x0062, r1
 202:	10 92 61 00 	sts	0x0061, r1

    // —брос флага изменений кэша
    UpdateLcd = FALSE;
 206:	10 92 60 00 	sts	0x0060, r1
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	08 95       	ret

00000214 <Lcd_init>:
 * ¬озвращаемое значение :  Ќет
 */
void Lcd_init ( void )
{
    // Pull-up на вывод подключенный к reset диспле€
    LCD_PORT |= _BV ( LCD_RST_PIN );
 214:	c4 9a       	sbi	0x18, 4	; 24

    // ”станавливаем нужные биты порта на выход
    LCD_DDR |= _BV( LCD_RST_PIN ) | _BV( LCD_DC_PIN ) | _BV( LCD_CE_PIN ) | _BV( SPI_MOSI_PIN ) | _BV( SPI_CLK_PIN );
 216:	87 b3       	in	r24, 0x17	; 23
 218:	8e 63       	ori	r24, 0x3E	; 62
 21a:	87 bb       	out	0x17, r24	; 23

    // Ќекалиброванна€ задержка
    Delay();

    // ƒергаем reset
    LCD_PORT &= ~( _BV( LCD_RST_PIN ) );
 21c:	c4 98       	cbi	0x18, 4	; 24
    Delay();
    LCD_PORT |= _BV ( LCD_RST_PIN );
 21e:	c4 9a       	sbi	0x18, 4	; 24

    // јктивируем SPI:
    // без прерываний, старший бит первый, режим мастера, CPOL->0, CPHA->0, Clk/4
    SPCR = 0x50;
 220:	80 e5       	ldi	r24, 0x50	; 80
 222:	8d b9       	out	0x0d, r24	; 13

    // ќтключаем LCD контроллер - высокий уровень на SCE
    LCD_PORT |= _BV( LCD_CE_PIN );
 224:	c2 9a       	sbi	0x18, 2	; 24

    // ќтправл€ем команды дисплею
    LcdSend( 0x21, LCD_CMD ); // ¬ключаем расширенный набор команд (LCD Extended Commands)
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	81 e2       	ldi	r24, 0x21	; 33
 22a:	6d df       	rcall	.-294    	; 0x106 <LcdSend>
    LcdSend( 0xC8, LCD_CMD ); // ”становка контрастности (LCD Vop)
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	88 ec       	ldi	r24, 0xC8	; 200
 230:	6a df       	rcall	.-300    	; 0x106 <LcdSend>
    LcdSend( 0x06, LCD_CMD ); // ”становка температурного коэффициента (Temp coefficent)
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	86 e0       	ldi	r24, 0x06	; 6
 236:	67 df       	rcall	.-306    	; 0x106 <LcdSend>
    LcdSend( 0x13, LCD_CMD ); // Ќастройка питани€ (LCD bias mode 1:48)
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	83 e1       	ldi	r24, 0x13	; 19
 23c:	64 df       	rcall	.-312    	; 0x106 <LcdSend>
    LcdSend( 0x20, LCD_CMD ); // ¬ключаем стандартный набор команд и горизонтальную адресацию (LCD Standard Commands,Horizontal addressing mode)
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	80 e2       	ldi	r24, 0x20	; 32
 242:	61 df       	rcall	.-318    	; 0x106 <LcdSend>
    LcdSend( 0x0C, LCD_CMD ); // Ќормальный режим (LCD in normal mode)
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	8c e0       	ldi	r24, 0x0C	; 12
 248:	5e df       	rcall	.-324    	; 0x106 <LcdSend>

    // ѕервична€ очистка диспле€
    Lcd_clear();
 24a:	68 df       	rcall	.-304    	; 0x11c <Lcd_clear>
    Lcd_update();
 24c:	7f df       	rcall	.-258    	; 0x14c <Lcd_update>
 24e:	08 95       	ret

00000250 <__divmodhi4>:
 250:	97 fb       	bst	r25, 7
 252:	07 2e       	mov	r0, r23
 254:	16 f4       	brtc	.+4      	; 0x25a <__divmodhi4+0xa>
 256:	00 94       	com	r0
 258:	06 d0       	rcall	.+12     	; 0x266 <__divmodhi4_neg1>
 25a:	77 fd       	sbrc	r23, 7
 25c:	08 d0       	rcall	.+16     	; 0x26e <__divmodhi4_neg2>
 25e:	0b d0       	rcall	.+22     	; 0x276 <__udivmodhi4>
 260:	07 fc       	sbrc	r0, 7
 262:	05 d0       	rcall	.+10     	; 0x26e <__divmodhi4_neg2>
 264:	3e f4       	brtc	.+14     	; 0x274 <__divmodhi4_exit>

00000266 <__divmodhi4_neg1>:
 266:	90 95       	com	r25
 268:	81 95       	neg	r24
 26a:	9f 4f       	sbci	r25, 0xFF	; 255
 26c:	08 95       	ret

0000026e <__divmodhi4_neg2>:
 26e:	70 95       	com	r23
 270:	61 95       	neg	r22
 272:	7f 4f       	sbci	r23, 0xFF	; 255

00000274 <__divmodhi4_exit>:
 274:	08 95       	ret

00000276 <__udivmodhi4>:
 276:	aa 1b       	sub	r26, r26
 278:	bb 1b       	sub	r27, r27
 27a:	51 e1       	ldi	r21, 0x11	; 17
 27c:	07 c0       	rjmp	.+14     	; 0x28c <__udivmodhi4_ep>

0000027e <__udivmodhi4_loop>:
 27e:	aa 1f       	adc	r26, r26
 280:	bb 1f       	adc	r27, r27
 282:	a6 17       	cp	r26, r22
 284:	b7 07       	cpc	r27, r23
 286:	10 f0       	brcs	.+4      	; 0x28c <__udivmodhi4_ep>
 288:	a6 1b       	sub	r26, r22
 28a:	b7 0b       	sbc	r27, r23

0000028c <__udivmodhi4_ep>:
 28c:	88 1f       	adc	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	5a 95       	dec	r21
 292:	a9 f7       	brne	.-22     	; 0x27e <__udivmodhi4_loop>
 294:	80 95       	com	r24
 296:	90 95       	com	r25
 298:	bc 01       	movw	r22, r24
 29a:	cd 01       	movw	r24, r26
 29c:	08 95       	ret

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
