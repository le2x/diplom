
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000188  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  00800060  000001fc  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000177  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000bf  00000000  00000000  000003e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000117  00000000  00000000  000004a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000078  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000165  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000068  00000000  00000000  00000799  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000801  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	45 c0       	rjmp	.+138    	; 0x9e <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	aa 36       	cpi	r26, 0x6A	; 106
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	44 d0       	rcall	.+136    	; 0xcc <main>
  44:	9f c0       	rjmp	.+318    	; 0x184 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <preset>:
uint8_t triger = 0,tmpTrig = 0;
int sec = 0, min = 0, hour = 0, tik = 0; //no-komments

void preset()
{
	DDRD = 0xff;
  48:	8f ef       	ldi	r24, 0xFF	; 255
  4a:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
  4c:	12 ba       	out	0x12, r1	; 18
  4e:	08 95       	ret

00000050 <setTimer>:
}

void setTimer()
{
	TCCR0 |= (1<<CS02) | (0<<CS01) | (1<<CS00);
  50:	83 b7       	in	r24, 0x33	; 51
  52:	85 60       	ori	r24, 0x05	; 5
  54:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);
  56:	89 b7       	in	r24, 0x39	; 57
  58:	81 60       	ori	r24, 0x01	; 1
  5a:	89 bf       	out	0x39, r24	; 57
	sei();
  5c:	78 94       	sei
  5e:	08 95       	ret

00000060 <Chasi>:
}

void Chasi()
{
	sec = tik/30;
  60:	80 91 60 00 	lds	r24, 0x0060
  64:	90 91 61 00 	lds	r25, 0x0061
  68:	6e e1       	ldi	r22, 0x1E	; 30
  6a:	70 e0       	ldi	r23, 0x00	; 0
  6c:	64 d0       	rcall	.+200    	; 0x136 <__divmodhi4>
  6e:	70 93 67 00 	sts	0x0067, r23
  72:	60 93 66 00 	sts	0x0066, r22
	{
		min += 1;
		sec = 0;
		
	}
	if (min>59)
  76:	80 91 64 00 	lds	r24, 0x0064
  7a:	90 91 65 00 	lds	r25, 0x0065
  7e:	cc 97       	sbiw	r24, 0x3c	; 60
  80:	6c f0       	brlt	.+26     	; 0x9c <Chasi+0x3c>
	{
		hour+=1;
  82:	80 91 62 00 	lds	r24, 0x0062
  86:	90 91 63 00 	lds	r25, 0x0063
  8a:	01 96       	adiw	r24, 0x01	; 1
  8c:	90 93 63 00 	sts	0x0063, r25
  90:	80 93 62 00 	sts	0x0062, r24
		min = 0;
  94:	10 92 65 00 	sts	0x0065, r1
  98:	10 92 64 00 	sts	0x0064, r1
  9c:	08 95       	ret

0000009e <__vector_9>:
	}
}

ISR(TIMER0_OVF_vect)
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
	tik += 1;
  ac:	80 91 60 00 	lds	r24, 0x0060
  b0:	90 91 61 00 	lds	r25, 0x0061
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	90 93 61 00 	sts	0x0061, r25
  ba:	80 93 60 00 	sts	0x0060, r24
		
}
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <main>:


int main(void)
{
	preset();
  cc:	bd df       	rcall	.-134    	; 0x48 <preset>
	setTimer();
  ce:	c0 df       	rcall	.-128    	; 0x50 <setTimer>
	uint8_t tempsec = 0;
  d0:	f1 2c       	mov	r15, r1
		if (tempsec != sec)
		{
			tmpTrig = 0;
		}
		
		if(sec % 10 == 0) 
  d2:	0a e0       	ldi	r16, 0x0A	; 10
  d4:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(triger == 0 && tmpTrig == 0 ) {PORTD |= (1<<PD0); triger = 1; tmpTrig = 1;}
			if(triger == 1 && tmpTrig == 0 ) {PORTD &= ~(1<<PD0); triger = 0;tmpTrig = 1;}
  d6:	ee 24       	eor	r14, r14
  d8:	e3 94       	inc	r14
		}
		
		tempsec = sec;
  da:	c6 e6       	ldi	r28, 0x66	; 102
  dc:	d0 e0       	ldi	r29, 0x00	; 0
	setTimer();
	uint8_t tempsec = 0;
	
    while(1)
    {
        Chasi();
  de:	c0 df       	rcall	.-128    	; 0x60 <Chasi>
		
		
		
		if (tempsec != sec)
  e0:	80 91 66 00 	lds	r24, 0x0066
  e4:	90 91 67 00 	lds	r25, 0x0067
  e8:	2f 2d       	mov	r18, r15
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	28 17       	cp	r18, r24
  ee:	39 07       	cpc	r19, r25
  f0:	11 f0       	breq	.+4      	; 0xf6 <main+0x2a>
		{
			tmpTrig = 0;
  f2:	10 92 68 00 	sts	0x0068, r1
		}
		
		if(sec % 10 == 0) 
  f6:	b8 01       	movw	r22, r16
  f8:	1e d0       	rcall	.+60     	; 0x136 <__divmodhi4>
  fa:	89 2b       	or	r24, r25
  fc:	d1 f4       	brne	.+52     	; 0x132 <main+0x66>
		{
			if(triger == 0 && tmpTrig == 0 ) {PORTD |= (1<<PD0); triger = 1; tmpTrig = 1;}
  fe:	80 91 69 00 	lds	r24, 0x0069
 102:	81 11       	cpse	r24, r1
 104:	09 c0       	rjmp	.+18     	; 0x118 <main+0x4c>
 106:	80 91 68 00 	lds	r24, 0x0068
 10a:	81 11       	cpse	r24, r1
 10c:	12 c0       	rjmp	.+36     	; 0x132 <main+0x66>
 10e:	90 9a       	sbi	0x12, 0	; 18
 110:	e0 92 69 00 	sts	0x0069, r14
 114:	e0 92 68 00 	sts	0x0068, r14
			if(triger == 1 && tmpTrig == 0 ) {PORTD &= ~(1<<PD0); triger = 0;tmpTrig = 1;}
 118:	80 91 69 00 	lds	r24, 0x0069
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	49 f4       	brne	.+18     	; 0x132 <main+0x66>
 120:	80 91 68 00 	lds	r24, 0x0068
 124:	81 11       	cpse	r24, r1
 126:	05 c0       	rjmp	.+10     	; 0x132 <main+0x66>
 128:	90 98       	cbi	0x12, 0	; 18
 12a:	10 92 69 00 	sts	0x0069, r1
 12e:	e0 92 68 00 	sts	0x0068, r14
		}
		
		tempsec = sec;
 132:	f8 80       	ld	r15, Y
    }
 134:	d4 cf       	rjmp	.-88     	; 0xde <main+0x12>

00000136 <__divmodhi4>:
 136:	97 fb       	bst	r25, 7
 138:	07 2e       	mov	r0, r23
 13a:	16 f4       	brtc	.+4      	; 0x140 <__divmodhi4+0xa>
 13c:	00 94       	com	r0
 13e:	06 d0       	rcall	.+12     	; 0x14c <__divmodhi4_neg1>
 140:	77 fd       	sbrc	r23, 7
 142:	08 d0       	rcall	.+16     	; 0x154 <__divmodhi4_neg2>
 144:	0b d0       	rcall	.+22     	; 0x15c <__udivmodhi4>
 146:	07 fc       	sbrc	r0, 7
 148:	05 d0       	rcall	.+10     	; 0x154 <__divmodhi4_neg2>
 14a:	3e f4       	brtc	.+14     	; 0x15a <__divmodhi4_exit>

0000014c <__divmodhi4_neg1>:
 14c:	90 95       	com	r25
 14e:	81 95       	neg	r24
 150:	9f 4f       	sbci	r25, 0xFF	; 255
 152:	08 95       	ret

00000154 <__divmodhi4_neg2>:
 154:	70 95       	com	r23
 156:	61 95       	neg	r22
 158:	7f 4f       	sbci	r23, 0xFF	; 255

0000015a <__divmodhi4_exit>:
 15a:	08 95       	ret

0000015c <__udivmodhi4>:
 15c:	aa 1b       	sub	r26, r26
 15e:	bb 1b       	sub	r27, r27
 160:	51 e1       	ldi	r21, 0x11	; 17
 162:	07 c0       	rjmp	.+14     	; 0x172 <__udivmodhi4_ep>

00000164 <__udivmodhi4_loop>:
 164:	aa 1f       	adc	r26, r26
 166:	bb 1f       	adc	r27, r27
 168:	a6 17       	cp	r26, r22
 16a:	b7 07       	cpc	r27, r23
 16c:	10 f0       	brcs	.+4      	; 0x172 <__udivmodhi4_ep>
 16e:	a6 1b       	sub	r26, r22
 170:	b7 0b       	sbc	r27, r23

00000172 <__udivmodhi4_ep>:
 172:	88 1f       	adc	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	5a 95       	dec	r21
 178:	a9 f7       	brne	.-22     	; 0x164 <__udivmodhi4_loop>
 17a:	80 95       	com	r24
 17c:	90 95       	com	r25
 17e:	bc 01       	movw	r22, r24
 180:	cd 01       	movw	r24, r26
 182:	08 95       	ret

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
