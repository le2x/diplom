
hidroponics.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002d6  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800062  00800062  0000036c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000044b  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e3  00000000  00000000  00000847  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000244  00000000  00000000  00000a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00000c70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000264  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bd  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001049  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	76 c0       	rjmp	.+236    	; 0x100 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ed       	ldi	r30, 0xD6	; 214
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ae 36       	cpi	r26, 0x6E	; 110
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	c7 d0       	rcall	.+398    	; 0x1e8 <main>
  5a:	3b c1       	rjmp	.+630    	; 0x2d2 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <preset>:
bool polivIsON = false;


void preset()
{
	DDRD = 0xff; 
  5e:	8f ef       	ldi	r24, 0xFF	; 255
  60:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x00;
  62:	14 ba       	out	0x14, r1	; 20
	PORTD = 0xff;
  64:	82 bb       	out	0x12, r24	; 18
	PORTC = 0xff;
  66:	85 bb       	out	0x15, r24	; 21
	PORTB = 0xff;
  68:	88 bb       	out	0x18, r24	; 24
  6a:	08 95       	ret

0000006c <setTimer>:
	//Lcd_init();
}

void setTimer()
{
	TCCR0 |= (1<<CS02) | (0<<CS01) | (1<<CS00);
  6c:	83 b7       	in	r24, 0x33	; 51
  6e:	85 60       	ori	r24, 0x05	; 5
  70:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);
  72:	89 b7       	in	r24, 0x39	; 57
  74:	81 60       	ori	r24, 0x01	; 1
  76:	89 bf       	out	0x39, r24	; 57
	sei();
  78:	78 94       	sei
  7a:	08 95       	ret

0000007c <setWatchdog>:
}

void setWatchdog()
{
	WDTCR=0x1F;
  7c:	8f e1       	ldi	r24, 0x1F	; 31
  7e:	81 bd       	out	0x21, r24	; 33
	WDTCR=0x0F;
  80:	8f e0       	ldi	r24, 0x0F	; 15
  82:	81 bd       	out	0x21, r24	; 33
  84:	08 95       	ret

00000086 <Chasi>:
}

void Chasi()
{
	sec = tik/30;
  86:	80 91 64 00 	lds	r24, 0x0064
  8a:	90 91 65 00 	lds	r25, 0x0065
  8e:	6e e1       	ldi	r22, 0x1E	; 30
  90:	70 e0       	ldi	r23, 0x00	; 0
  92:	f8 d0       	rcall	.+496    	; 0x284 <__divmodhi4>
  94:	60 93 68 00 	sts	0x0068, r22
		
	if (sec>60)
  98:	6d 33       	cpi	r22, 0x3D	; 61
  9a:	b8 f0       	brcs	.+46     	; 0xca <Chasi+0x44>
	{
		min += 1;
  9c:	80 91 67 00 	lds	r24, 0x0067
  a0:	8f 5f       	subi	r24, 0xFF	; 255
  a2:	80 93 67 00 	sts	0x0067, r24
		intervalCounter++;
  a6:	80 91 6a 00 	lds	r24, 0x006A
  aa:	8f 5f       	subi	r24, 0xFF	; 255
  ac:	80 93 6a 00 	sts	0x006A, r24
		if (polivTriger){polivCounter++;}
  b0:	80 91 60 00 	lds	r24, 0x0060
  b4:	88 23       	and	r24, r24
  b6:	29 f0       	breq	.+10     	; 0xc2 <Chasi+0x3c>
  b8:	80 91 6c 00 	lds	r24, 0x006C
  bc:	8f 5f       	subi	r24, 0xFF	; 255
  be:	80 93 6c 00 	sts	0x006C, r24
		tik = 0;
  c2:	10 92 65 00 	sts	0x0065, r1
  c6:	10 92 64 00 	sts	0x0064, r1
		
	}
	if (min>60)
  ca:	80 91 67 00 	lds	r24, 0x0067
  ce:	8d 33       	cpi	r24, 0x3D	; 61
  d0:	80 f0       	brcs	.+32     	; 0xf2 <Chasi+0x6c>
	{
		hour+=1;
  d2:	80 91 66 00 	lds	r24, 0x0066
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	80 93 66 00 	sts	0x0066, r24
		if (lightTrig){lightingCounter++;}
  dc:	80 91 69 00 	lds	r24, 0x0069
  e0:	88 23       	and	r24, r24
  e2:	29 f0       	breq	.+10     	; 0xee <Chasi+0x68>
  e4:	80 91 6b 00 	lds	r24, 0x006B
  e8:	8f 5f       	subi	r24, 0xFF	; 255
  ea:	80 93 6b 00 	sts	0x006B, r24
		min = 0;
  ee:	10 92 67 00 	sts	0x0067, r1
	}
	if (hour>24)
  f2:	80 91 66 00 	lds	r24, 0x0066
  f6:	89 31       	cpi	r24, 0x19	; 25
  f8:	10 f0       	brcs	.+4      	; 0xfe <Chasi+0x78>
	{
		hour = 0;
  fa:	10 92 66 00 	sts	0x0066, r1
  fe:	08 95       	ret

00000100 <__vector_9>:
	}
}

ISR(TIMER0_OVF_vect)
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
	tik += 1;
 10e:	80 91 64 00 	lds	r24, 0x0064
 112:	90 91 65 00 	lds	r25, 0x0065
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	90 93 65 00 	sts	0x0065, r25
 11c:	80 93 64 00 	sts	0x0064, r24
		
}
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <checkWateringIntervals>:

void checkWateringIntervals()
{
	if(bit_is_clear(PINC,2))
 12e:	9a 99       	sbic	0x13, 2	; 19
 130:	12 c0       	rjmp	.+36     	; 0x156 <checkWateringIntervals+0x28>
	{
		tempWatering = wateringInterwals*1;
 132:	8f e0       	ldi	r24, 0x0F	; 15
 134:	80 93 6d 00 	sts	0x006D, r24
		if(bit_is_clear(PINC,3))
 138:	9b 99       	sbic	0x13, 3	; 19
 13a:	0d c0       	rjmp	.+26     	; 0x156 <checkWateringIntervals+0x28>
		{
			tempWatering = wateringInterwals*2;
 13c:	8e e1       	ldi	r24, 0x1E	; 30
 13e:	80 93 6d 00 	sts	0x006D, r24
			if(bit_is_clear(PINC,4))
 142:	9c 99       	sbic	0x13, 4	; 19
 144:	08 c0       	rjmp	.+16     	; 0x156 <checkWateringIntervals+0x28>
			{
				tempWatering = wateringInterwals*3;
 146:	8d e2       	ldi	r24, 0x2D	; 45
 148:	80 93 6d 00 	sts	0x006D, r24
				if(bit_is_clear(PINC,5))
 14c:	9d 99       	sbic	0x13, 5	; 19
 14e:	03 c0       	rjmp	.+6      	; 0x156 <checkWateringIntervals+0x28>
				{
					tempWatering = wateringInterwals*4;
 150:	8c e3       	ldi	r24, 0x3C	; 60
 152:	80 93 6d 00 	sts	0x006D, r24
 156:	08 95       	ret

00000158 <powerswitch>:
	}
}

void powerswitch(uint8_t obj, uint8_t condition) // obj(1-poliv; 2-light) condition(1-ON; 2-OFF)
{
	if (obj == 1 && condition == 1)
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	51 f4       	brne	.+20     	; 0x170 <powerswitch+0x18>
 15c:	61 30       	cpi	r22, 0x01	; 1
 15e:	a9 f4       	brne	.+42     	; 0x18a <powerswitch+0x32>
	{
		PORTD &= ~(1<<PD0);
 160:	90 98       	cbi	0x12, 0	; 18
		polivIsON = true;
 162:	80 93 62 00 	sts	0x0062, r24
 166:	08 95       	ret
	}
	if (obj == 1 && condition == 2)
	{
		PORTD |= (1<<PD0);
 168:	90 9a       	sbi	0x12, 0	; 18
		polivIsON = false;
 16a:	10 92 62 00 	sts	0x0062, r1
 16e:	08 95       	ret
	}
	
	if (obj == 2 && condition == 1)
 170:	82 30       	cpi	r24, 0x02	; 2
 172:	81 f4       	brne	.+32     	; 0x194 <powerswitch+0x3c>
 174:	61 30       	cpi	r22, 0x01	; 1
 176:	61 f4       	brne	.+24     	; 0x190 <powerswitch+0x38>
	{
		PORTD &= ~(1<<PD1);
 178:	91 98       	cbi	0x12, 1	; 18
		lightIsON = true;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 93 63 00 	sts	0x0063, r24
 180:	08 95       	ret
	}
	if (obj == 2 && condition == 2)
	{
		PORTD |= (1<<PD1);
 182:	91 9a       	sbi	0x12, 1	; 18
		lightIsON = false;
 184:	10 92 63 00 	sts	0x0063, r1
 188:	08 95       	ret
	if (obj == 1 && condition == 1)
	{
		PORTD &= ~(1<<PD0);
		polivIsON = true;
	}
	if (obj == 1 && condition == 2)
 18a:	62 30       	cpi	r22, 0x02	; 2
 18c:	19 f4       	brne	.+6      	; 0x194 <powerswitch+0x3c>
 18e:	ec cf       	rjmp	.-40     	; 0x168 <powerswitch+0x10>
	if (obj == 2 && condition == 1)
	{
		PORTD &= ~(1<<PD1);
		lightIsON = true;
	}
	if (obj == 2 && condition == 2)
 190:	62 30       	cpi	r22, 0x02	; 2
 192:	b9 f3       	breq	.-18     	; 0x182 <powerswitch+0x2a>
 194:	08 95       	ret

00000196 <poliv>:
}

void poliv()
{
	
	if (polivCounter < wateringTime && polivTriger)
 196:	80 91 6c 00 	lds	r24, 0x006C
 19a:	84 30       	cpi	r24, 0x04	; 4
 19c:	88 f4       	brcc	.+34     	; 0x1c0 <poliv+0x2a>
 19e:	80 91 60 00 	lds	r24, 0x0060
 1a2:	88 23       	and	r24, r24
 1a4:	01 f1       	breq	.+64     	; 0x1e6 <poliv+0x50>
	{
		if (polivIsON == false) {powerswitch(1,1);}
 1a6:	80 91 62 00 	lds	r24, 0x0062
 1aa:	81 11       	cpse	r24, r1
 1ac:	1c c0       	rjmp	.+56     	; 0x1e6 <poliv+0x50>
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	d0 df       	rcall	.-96     	; 0x158 <powerswitch>
	
	} 
	if (polivCounter >= wateringTime && polivTriger)
 1b8:	80 91 6c 00 	lds	r24, 0x006C
 1bc:	84 30       	cpi	r24, 0x04	; 4
 1be:	98 f0       	brcs	.+38     	; 0x1e6 <poliv+0x50>
 1c0:	80 91 60 00 	lds	r24, 0x0060
 1c4:	88 23       	and	r24, r24
 1c6:	79 f0       	breq	.+30     	; 0x1e6 <poliv+0x50>
	{
		if (polivIsON == true) {powerswitch(1,2);}
 1c8:	80 91 62 00 	lds	r24, 0x0062
 1cc:	88 23       	and	r24, r24
 1ce:	29 f0       	breq	.+10     	; 0x1da <poliv+0x44>
 1d0:	62 e0       	ldi	r22, 0x02	; 2
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	bf df       	rcall	.-130    	; 0x158 <powerswitch>
		intervalCounter = 0;
 1da:	10 92 6a 00 	sts	0x006A, r1
		polivTriger = 0;
 1de:	10 92 60 00 	sts	0x0060, r1
		polivCounter = 0;
 1e2:	10 92 6c 00 	sts	0x006C, r1
 1e6:	08 95       	ret

000001e8 <main>:
	}
}

int main(void)
{
	preset();
 1e8:	3a df       	rcall	.-396    	; 0x5e <preset>
	setTimer();
 1ea:	40 df       	rcall	.-384    	; 0x6c <setTimer>
	setWatchdog();
 1ec:	47 df       	rcall	.-370    	; 0x7c <setWatchdog>
		checkWateringIntervals();
		asm("wdr");
		
		if(intervalCounter >= tempWatering)
		{
			polivTriger = 1;
 1ee:	c1 e0       	ldi	r28, 0x01	; 1
	setTimer();
	setWatchdog();
	
    while(1)
    {
        Chasi();
 1f0:	4a df       	rcall	.-364    	; 0x86 <Chasi>
		poliv();
 1f2:	d1 df       	rcall	.-94     	; 0x196 <poliv>
		checkWateringIntervals();
 1f4:	9c df       	rcall	.-200    	; 0x12e <checkWateringIntervals>
		asm("wdr");
 1f6:	a8 95       	wdr
		
		if(intervalCounter >= tempWatering)
 1f8:	90 91 6a 00 	lds	r25, 0x006A
 1fc:	80 91 6d 00 	lds	r24, 0x006D
 200:	98 17       	cp	r25, r24
 202:	10 f0       	brcs	.+4      	; 0x208 <main+0x20>
		{
			polivTriger = 1;
 204:	c0 93 60 00 	sts	0x0060, r28
		}
		if(bit_is_clear(PINC,0))
 208:	98 9b       	sbis	0x13, 0	; 19
		{
			polivTriger = 1;
 20a:	c0 93 60 00 	sts	0x0060, r28
		}
		
		if (hour == lightstart)
 20e:	80 91 66 00 	lds	r24, 0x0066
 212:	8a 30       	cpi	r24, 0x0A	; 10
 214:	11 f4       	brne	.+4      	; 0x21a <main+0x32>
		{
			lightTrig = 1;
 216:	c0 93 69 00 	sts	0x0069, r28
		}
		if (bit_is_clear(PINC,1))
 21a:	99 99       	sbic	0x13, 1	; 19
 21c:	0b c0       	rjmp	.+22     	; 0x234 <main+0x4c>
		{
			lightTrig = 1;
 21e:	c0 93 69 00 	sts	0x0069, r28
			 powerswitch(2,1);
 222:	6c 2f       	mov	r22, r28
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	98 df       	rcall	.-208    	; 0x158 <powerswitch>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 228:	87 ea       	ldi	r24, 0xA7	; 167
 22a:	91 e6       	ldi	r25, 0x61	; 97
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <main+0x44>
 230:	00 c0       	rjmp	.+0      	; 0x232 <main+0x4a>
 232:	00 00       	nop
			_delay_ms(100);
		}
		
		if (lightingCounter >= lightingTime)
 234:	80 91 6b 00 	lds	r24, 0x006B
 238:	80 31       	cpi	r24, 0x10	; 16
 23a:	18 f0       	brcs	.+6      	; 0x242 <main+0x5a>
		{
			lightTrig = 0;
 23c:	10 92 69 00 	sts	0x0069, r1
 240:	0b c0       	rjmp	.+22     	; 0x258 <main+0x70>
		}
		
		if (lightTrig == 1)
 242:	80 91 69 00 	lds	r24, 0x0069
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	19 f4       	brne	.+6      	; 0x250 <main+0x68>
		{
			 powerswitch(2,1);
 24a:	6c 2f       	mov	r22, r28
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	84 df       	rcall	.-248    	; 0x158 <powerswitch>
		}
		if (lightTrig == 0)
 250:	80 91 69 00 	lds	r24, 0x0069
 254:	81 11       	cpse	r24, r1
 256:	05 c0       	rjmp	.+10     	; 0x262 <main+0x7a>
		{
			powerswitch(2,2);
 258:	62 e0       	ldi	r22, 0x02	; 2
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	7d df       	rcall	.-262    	; 0x158 <powerswitch>
			lightingCounter = 0;
 25e:	10 92 6b 00 	sts	0x006B, r1
		}	
	
		if (bit_is_clear(PINC,1) && lightTrig)
 262:	99 99       	sbic	0x13, 1	; 19
 264:	c5 cf       	rjmp	.-118    	; 0x1f0 <main+0x8>
 266:	80 91 69 00 	lds	r24, 0x0069
 26a:	88 23       	and	r24, r24
 26c:	09 f4       	brne	.+2      	; 0x270 <main+0x88>
 26e:	c0 cf       	rjmp	.-128    	; 0x1f0 <main+0x8>
		{
			powerswitch(2,2);
 270:	62 e0       	ldi	r22, 0x02	; 2
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	71 df       	rcall	.-286    	; 0x158 <powerswitch>
 276:	87 ea       	ldi	r24, 0xA7	; 167
 278:	91 e6       	ldi	r25, 0x61	; 97
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <main+0x92>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x98>
 280:	00 00       	nop
 282:	b6 cf       	rjmp	.-148    	; 0x1f0 <main+0x8>

00000284 <__divmodhi4>:
 284:	97 fb       	bst	r25, 7
 286:	07 2e       	mov	r0, r23
 288:	16 f4       	brtc	.+4      	; 0x28e <__divmodhi4+0xa>
 28a:	00 94       	com	r0
 28c:	06 d0       	rcall	.+12     	; 0x29a <__divmodhi4_neg1>
 28e:	77 fd       	sbrc	r23, 7
 290:	08 d0       	rcall	.+16     	; 0x2a2 <__divmodhi4_neg2>
 292:	0b d0       	rcall	.+22     	; 0x2aa <__udivmodhi4>
 294:	07 fc       	sbrc	r0, 7
 296:	05 d0       	rcall	.+10     	; 0x2a2 <__divmodhi4_neg2>
 298:	3e f4       	brtc	.+14     	; 0x2a8 <__divmodhi4_exit>

0000029a <__divmodhi4_neg1>:
 29a:	90 95       	com	r25
 29c:	81 95       	neg	r24
 29e:	9f 4f       	sbci	r25, 0xFF	; 255
 2a0:	08 95       	ret

000002a2 <__divmodhi4_neg2>:
 2a2:	70 95       	com	r23
 2a4:	61 95       	neg	r22
 2a6:	7f 4f       	sbci	r23, 0xFF	; 255

000002a8 <__divmodhi4_exit>:
 2a8:	08 95       	ret

000002aa <__udivmodhi4>:
 2aa:	aa 1b       	sub	r26, r26
 2ac:	bb 1b       	sub	r27, r27
 2ae:	51 e1       	ldi	r21, 0x11	; 17
 2b0:	07 c0       	rjmp	.+14     	; 0x2c0 <__udivmodhi4_ep>

000002b2 <__udivmodhi4_loop>:
 2b2:	aa 1f       	adc	r26, r26
 2b4:	bb 1f       	adc	r27, r27
 2b6:	a6 17       	cp	r26, r22
 2b8:	b7 07       	cpc	r27, r23
 2ba:	10 f0       	brcs	.+4      	; 0x2c0 <__udivmodhi4_ep>
 2bc:	a6 1b       	sub	r26, r22
 2be:	b7 0b       	sbc	r27, r23

000002c0 <__udivmodhi4_ep>:
 2c0:	88 1f       	adc	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	5a 95       	dec	r21
 2c6:	a9 f7       	brne	.-22     	; 0x2b2 <__udivmodhi4_loop>
 2c8:	80 95       	com	r24
 2ca:	90 95       	com	r25
 2cc:	bc 01       	movw	r22, r24
 2ce:	cd 01       	movw	r24, r26
 2d0:	08 95       	ret

000002d2 <_exit>:
 2d2:	f8 94       	cli

000002d4 <__stop_program>:
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <__stop_program>
